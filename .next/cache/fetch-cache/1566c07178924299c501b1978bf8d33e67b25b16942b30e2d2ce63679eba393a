{"kind":"FETCH","data":{"headers":{"access-control-allow-credentials":"false","access-control-allow-methods":"GET, POST","access-control-allow-origin":"*","cache-control":"private","cf-cache-status":"DYNAMIC","cf-ray":"95e1c817fb4117a4-MAA","connection":"keep-alive","content-encoding":"gzip","content-length":"33141","content-security-policy":"upgrade-insecure-requests; frame-ancestors 'self' https://stackexchange.com","content-type":"application/json; charset=utf-8","date":"Sat, 12 Jul 2025 16:05:21 GMT","server":"cloudflare","set-cookie":"_cfuvid=V5bCKw0ce9g0jjZW9EXK_m5Gd0qCXObd97wZZvDtxNM-1752336321649-0.0.1.1-604800000; path=/; domain=.api.stackexchange.com; HttpOnly; Secure; SameSite=None","strict-transport-security":"max-age=31536000; includeSubDomains","vary":"accept-encoding","x-content-type-options":"nosniff","x-providence-cookie":"e357ee9b-38be-4f72-aecd-b0f03e7cd427","x-request-guid":"c521e034-a775-4f31-a06d-92b4bf5611a2","x-worker-origin-response-time":"363000000"},"body":"{"items":[{"tags":["flutter","flutter-test","automation-testing"],"owner":{"account_id":25483842,"reputation":46,"user_id":19279676,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/a-/AOh14GhEGQMsKiM7O4UFQF6aN7UjEgcbvXW8XQ9eHahsyg=k-s256","display_name":"Ramanathan s","link":"https://stackoverflow.com/users/19279676/ramanathan-s"},"is_answered":true,"view_count":461,"answer_count":1,"score":1,"last_activity_date":1752161623,"creation_date":1660821838,"last_edit_date":1660821951,"question_id":73402232,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/73402232/how-to-automate-native-features-like-take-image-in-camera-or-pop-ups-tapping","title":"How to automate native features (like take image in camera) or pop-ups (tapping on allow or deny) in flutter integration testing","body":"<p>Every time I log in to my flutter app using integration test script &quot;Allow user to access contact&quot; pop up will be displayed which is a native component. I could not access or tap those pop ups using flutter test driver. Is there a way to automate those process or any work around for it?</p>\n"},{"tags":["python","jupyter","project","libraries","facial-identification"],"owner":{"account_id":42969259,"reputation":1,"user_id":31011456,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/56bf9fce86814df19b6b1b8fbda79e95?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Jennie","link":"https://stackoverflow.com/users/31011456/jennie"},"is_answered":false,"view_count":29,"closed_date":1752295490,"answer_count":0,"score":-2,"last_activity_date":1752156656,"creation_date":1752156656,"question_id":79697198,"link":"https://stackoverflow.com/questions/79697198/how-can-i-upload-image-folders-on-local-jupyter-so-that-i-can-apply-eda-and-extr","closed_reason":"Not suitable for this site","title":"How can I upload image folders on local jupyter so that i can apply EDA and extract feature(each folder-&gt;many image frames) w/ running out of memory?","body":"<p>How can I upload image folders on local jupyter so that i can apply EDA and extract feature(each folder-&gt;many image frames) w/ running out of memory?\nWhen i uploaded all folders, the prog either shows system RAM out of memory, closes the prog, or hangs\neach folder has many images\n(using python ofc)\nI want to apply eda and extract features from each and every image.</p>\n"},{"tags":["css","reactjs","next.js","tailwind-css","jsx"],"owner":{"account_id":24909807,"reputation":1,"user_id":18779478,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/a-/AOh14Gib9hfWudZ6fL96Zk8Gs_eZkVI8YwaXipv1co3B5g=k-s256","display_name":"Olowoniyi Daniel","link":"https://stackoverflow.com/users/18779478/olowoniyi-daniel"},"is_answered":false,"view_count":30,"closed_date":1752137170,"answer_count":0,"score":-6,"last_activity_date":1752134096,"creation_date":1752134096,"question_id":79696697,"link":"https://stackoverflow.com/questions/79696697/how-do-i-make-that-tags-fall-from-up-to-down-and-stack-up-as-it-is-in-the-image","closed_reason":"Needs more focus","title":"How do i make that tags fall from up to down and stack up as it is in the image?","body":"<p><a href=\"https://i.sstatic.net/ovNGUGA4.png\" rel=\"nofollow noreferrer\">UI i want to recreate</a></p>\n<p>I want to make those tags fall from up to down and stack as it is on the image. so for example when the user scroll to that section of the page, the tags should just start to fall from top to the bottom of that section. so how do i acheive that?</p>\n"},{"tags":["android","android-studio","android-sdk-manager"],"owner":{"account_id":19289342,"reputation":3493,"user_id":14099703,"user_type":"registered","profile_image":"https://i.sstatic.net/Bnun7.jpg?s=256","display_name":"Saheel Sapovadia","link":"https://stackoverflow.com/users/14099703/saheel-sapovadia"},"is_answered":true,"view_count":4803,"answer_count":1,"score":2,"last_activity_date":1752127634,"creation_date":1662465816,"last_edit_date":1752127634,"question_id":73621743,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/73621743/this-download-could-not-be-finalized-from-the-interim-state-retrying-without-ca","title":"This download could not be finalized from the interim state. Retrying without caching -&gt; Intel x86 Atom_64 System Image","body":"<p>Installing the Android studio SDK packages as per the <a href=\"https://reactnative.dev/docs/environment-setup\" rel=\"nofollow noreferrer\">react native get started</a> documentation.\nAnd I have changed the Installation directory from default C Drive AppData... to D Drive due to space contraints in C drive.</p>\n<p>Now facing the following error in -\nDownloading <a href=\"https://dl.google.com/android/repository/sys-img/android/x86_64-31_r03.zip\" rel=\"nofollow noreferrer\">https://dl.google.com/android/repository/sys-img/android/x86_64-31_r03.zip</a></p>\n<blockquote>\n<p>This download could not be finalized from the interim state. Retrying\nwithout caching.</p>\n</blockquote>\n<p><a href=\"https://i.sstatic.net/rX9Jn.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/rX9Jn.png\" alt=\"enter image description here\" /></a></p>\n"},{"tags":["python","matplotlib"],"owner":{"account_id":201492,"reputation":5741,"user_id":447967,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/b9c16571f73f2039d458b29f672334ee?s=256&d=identicon&r=PG","display_name":"exfizik","link":"https://stackoverflow.com/users/447967/exfizik"},"is_answered":true,"view_count":127316,"protected_date":1752167598,"accepted_answer_id":13018800,"answer_count":1,"score":29,"last_activity_date":1752127608,"creation_date":1350933080,"last_edit_date":1354739828,"question_id":13018115,"content_license":"CC BY-SA 3.0","link":"https://stackoverflow.com/questions/13018115/matplotlib-savefig-image-size-with-bbox-inches-tight","title":"matplotlib savefig image size with bbox_inches=&#39;tight&#39;","body":"<p>I have to make a vector plot and I want to just see the vectors without the axes, titles etc so here is how I try to do it:</p>\n\n<pre><code>pyplot.figure(None, figsize=(10, 16), dpi=100)\npyplot.quiver(data['x'], data['y'], data['u'], data['v'], \n              pivot='tail', \n              units='dots', \n              scale=0.2,\n              color='black')\n\npyplot.autoscale(tight=True)\npyplot.axis('off')\nax = pyplot.gca()\nax.xaxis.set_major_locator(pylab.NullLocator())\nax.yaxis.set_major_locator(pylab.NullLocator())\npyplot.savefig(\"test.png\", \n               bbox_inches='tight', \n               transparent=True,\n               pad_inches=0)\n</code></pre>\n\n<p>and despite my efforts to have an image 1000 by 1600 I get one 775 by 1280. How do I make it the desired size? \nThank you.</p>\n\n<p><strong>UPDATE</strong> The presented solution works, except in my case I also had to manually set the axes limits. Otherwise, matplotlib could not figure out the \"tight\" bounding box.</p>\n"},{"tags":["html","image","css","png"],"owner":{"account_id":1587088,"reputation":1047,"user_id":1471166,"user_type":"registered","accept_rate":38,"profile_image":"https://www.gravatar.com/avatar/23ebec160b1f9862bfe27f68341a2254?s=256&d=identicon&r=PG","display_name":"nimi","link":"https://stackoverflow.com/users/1471166/nimi"},"is_answered":true,"view_count":88382,"answer_count":7,"score":67,"last_activity_date":1752120174,"creation_date":1349181659,"last_edit_date":1677935708,"question_id":12690444,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/12690444/css-border-on-png-image-with-transparent-parts","title":"CSS Border on PNG image with transparent parts","body":"<p>Im trying to add a border on a PNG image I have (Example included).\nThe thing is that when I add the border currently it adds it on a box shape around all the image and not on the exact vector (Meaning it includes the transparent parts in the image).</p>\n<p>Is there any possible way to setup the configuration of the border that it won't consider the transparent areas. (Even if not in CSS... Maybe HTML5/JS?)</p>\n<p><img src=\"https://i.sstatic.net/Hmp6E.png\" alt=\"Example image\" /></p>\n<p><img src=\"https://i.sstatic.net/nlKJq.png\" alt=\"Example image with border\" /></p>\n"},{"tags":["jquery","html","css"],"owner":{"account_id":97871,"reputation":68375,"user_id":265261,"user_type":"registered","accept_rate":86,"profile_image":"https://www.gravatar.com/avatar/3e27be34f21aa0acd442e1961c17c362?s=256&d=identicon&r=PG","display_name":"aknuds1","link":"https://stackoverflow.com/users/265261/aknuds1"},"is_answered":true,"view_count":369979,"answer_count":10,"score":74,"last_activity_date":1752103464,"creation_date":1315310377,"last_edit_date":1528994973,"question_id":7319552,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/7319552/can-i-fade-in-a-background-image-css-background-image-with-jquery","title":"Can I fade in a background image (CSS: background-image) with jQuery?","body":"<p>I have a <code>div</code> element with text in it and a background image, which is set via the CSS property <code>background-image</code>. Is it possible to fade in the background image via jQuery?</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: contain;\r\n  background-image: url(http://upload.wikimedia.org/wikipedia/commons/8/84/Konqi_svg.svg);\r\n  border: 1px solid #666;\r\n  height: 10em;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div&gt;Text&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>I've made a <a href=\"http://jsfiddle.net/aknuds1/Tz6Q3/1/\" rel=\"noreferrer\">fiddle</a> exemplifying my scenario. Basically, this configures an initial <code>background-image</code> and a <code>transition</code>, and changes the <code>background-image</code> with jQuery. In my testing there is no animated transition between the two images.</p>\n\n<p><strong>EDIT2</strong></p>\n\n<p>My revised <a href=\"http://jsfiddle.net/aknuds1/Tz6Q3/4/\" rel=\"noreferrer\">fiddle</a> works! </p>\n"},{"tags":["machine-learning","deep-learning","neural-network","object-detection","image-segmentation"],"owner":{"account_id":5577949,"reputation":2952,"user_id":4420797,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/-uPAoqbuB0jM/AAAAAAAAAAI/AAAAAAAABSo/dpT-k2C_ddM/s256-rj/photo.jpg","display_name":"Khawar Islam","link":"https://stackoverflow.com/users/4420797/khawar-islam"},"is_answered":false,"view_count":29,"closed_date":1752057138,"answer_count":0,"score":-1,"last_activity_date":1752088870,"creation_date":1752050381,"last_edit_date":1752088870,"question_id":79695335,"link":"https://stackoverflow.com/questions/79695335/how-to-create-diverse-image-dataset-from-videos","closed_reason":"Not suitable for this site","title":"How to create diverse image dataset from Videos?","body":"<p>I am working on an object detection task where I need to detect things like people and cars on the road. For example, I’m recording a video from point A to point B. If a person walks from A to B and is visible in 10 frames, each frame looks almost the same except for a small movement.</p>\n<p>Are these similar frames really useful for training YOLO?</p>\n<p>I feel like using all of them doesn’t add much variety to the data. Am I right? If I remove some of these similar frames, will it hurt my model’s performance?</p>\n"},{"tags":["reactjs","react-native","react-native-maps"],"owner":{"account_id":16099305,"reputation":191,"user_id":11620541,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/9579d608aca667ac7d2e736107652678?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Try2prog","link":"https://stackoverflow.com/users/11620541/try2prog"},"is_answered":true,"view_count":2691,"answer_count":5,"score":5,"last_activity_date":1752074253,"creation_date":1616838717,"last_edit_date":1752074253,"question_id":66829982,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/66829982/image-not-showing-on-custom-callout-in-mapview","title":"Image not showing on custom callout in mapview","body":"<p>I have a map screen with markers. I try to add image to the callout and I use same method of <code>&lt;image source = .. /&gt; </code> as I did in other place that works, but on the map it wont show me the picture.</p>\n<pre><code>\n {\n        this.state.markers.map(marker =&gt; (\n          \n          &lt;MapView.Marker\n            key={marker.id}\n            coordinate={{longitude: marker.longitude, latitude: marker.latitude}}&gt;\n              &lt;MapView.Callout&gt;\n                &lt;View&gt;\n                      &lt;View&gt;\n                        {marker.imageUri &amp;&amp; &lt;Image source = {{uri: marker.imageUri}}\n                        style = {{ width: '90%', height: 100, justifyContent: 'center', flex: 1, alignContent: 'center', resizeMode: 'stretch'}}\n                      /&gt;  }        \n                      &lt;/View&gt;\n                    &lt;Text&gt;Lat: {marker.latitude}, Lon: {marker.longitude}&lt;/Text&gt;\n                    &lt;Text&gt;{marker.email}&lt;/Text&gt;\n                &lt;/View&gt;\n              &lt;/MapView.Callout&gt;         \n          &lt;/MapView.Marker&gt;\n        ))\n      }\n</code></pre>\n<p>it gives me a blank view instead of the image.\nHave I done any mistake?</p>\n"},{"tags":["amazon-web-services","amazon-ecr"],"owner":{"account_id":3795,"reputation":49785,"user_id":5542,"user_type":"registered","accept_rate":61,"profile_image":"https://i.sstatic.net/qSMgT.jpg?s=256","display_name":"Rasmus Faber","link":"https://stackoverflow.com/users/5542/rasmus-faber"},"is_answered":true,"view_count":61,"answer_count":1,"score":-1,"last_activity_date":1752074068,"creation_date":1749850403,"last_edit_date":1752073027,"question_id":79665406,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79665406/non-image-artifact-gets-deleted-by-amazon-ecr-policy","title":"Non-image artifact gets deleted by Amazon ECR policy","body":"<p>I have pushed some non-image artifacts to Amazon ECR (attempting to store some meta-data).</p>\n<p>But after a while they were gone.</p>\n<p>I looked in Cloudtrail and found that they had been deleted by a PolicyExecutionEvent, but the lifecycleEventRule that has been used is not one I have defined (and it shares rulePriority 1 with one that I have defined). It is called &quot;Clean orphan artifacts&quot;:</p>\n<pre class=\"lang-json prettyprint-override\"><code>            {\n              &quot;rulePriority&quot;: 1,\n              &quot;description&quot;: &quot;Clean orphan artifacts&quot;,\n              &quot;lifecycleEventSelection&quot;: {\n                &quot;tagStatus&quot;: &quot;Any&quot;,\n                &quot;tagPrefixList&quot;: [],\n                &quot;tagPatternList&quot;: [],\n                &quot;countType&quot;: &quot;Cleanup orphan artifacts&quot;,\n                &quot;countNumber&quot;: 1\n              },\n              &quot;action&quot;: &quot;expire&quot;\n            }\n</code></pre>\n<p>It looks like it is some kind of built-in rule, but I can't find any information about it.</p>\n<p>Is it a built-in rule? Why did it decide that my artifacts were orphaned and how can I avoid that?</p>\n"},{"tags":["python","image","psd"],"owner":{"account_id":2684898,"reputation":105,"user_id":2319485,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/e170689475c80e205281092951e0210b?s=256&d=identicon&r=PG","display_name":"Pic","link":"https://stackoverflow.com/users/2319485/pic"},"is_answered":true,"view_count":6703,"accepted_answer_id":18667870,"answer_count":2,"score":5,"last_activity_date":1752070849,"creation_date":1378503290,"last_edit_date":1378567608,"question_id":18666920,"content_license":"CC BY-SA 3.0","link":"https://stackoverflow.com/questions/18666920/how-to-create-a-psd-layered-file-from-multiple-image-in-python","title":"How to create a psd layered file from multiple image in python","body":"<p>I need to create a psd file to merge several images into a single layered one.<br>\nI saw that the <em>gimp command line</em> seems to be the only way to be able to do, but I would like to make this tool-independent.<br>\n<em>Would there be another solution ?</em></p>\n\n<p>For info I already looked into <em>psd-tools</em>, <em>psdparse</em>, <em>pypsd</em> that allows extracting layers from a psd to make a separate image with it but not the other way around.</p>\n\n<p>o/</p>\n"},{"tags":["java","spring-boot","openssl","netty","graalvm"],"owner":{"account_id":42949321,"reputation":1,"user_id":31001393,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/36b479f7546b434a6ed7386943531ada?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"johnarne","link":"https://stackoverflow.com/users/31001393/johnarne"},"is_answered":false,"view_count":21,"answer_count":0,"score":0,"last_activity_date":1752061015,"creation_date":1752061015,"question_id":79695550,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79695550/unable-to-load-tcnatve-openssl-in-native-image","title":"Unable to load tcnatve openssl in native image","body":"<p>I have a Spring Boot webflux app, running Netty. When enabling SSL performance hurts more than expected, and I want to check if using native OpenSSL (netty-tcnative) helps.</p>\n<p>I think I have everything set up correctly, but the app reports OpenSSL unavailable. I've reproduced in a simple Spring Boot app, but when running the image I get the following stacktrace:</p>\n<pre><code>java.lang.IllegalArgumentException: Failed to load any of the given libraries: [netty_tcnative_linux_aarch_64, netty_tcnative_linux_aarch_64_fedora, netty_tcnative_aarch_64, netty_tcnative]\n    at io.netty.util.internal.NativeLibraryLoader.loadFirstAvailable(NativeLibraryLoader.java:114)\n    at io.netty.handler.ssl.OpenSsl.loadTcNative(OpenSsl.java:716)\n    at io.netty.handler.ssl.OpenSsl.&lt;clinit&gt;(OpenSsl.java:110)\n    at com.example.OpensslTestApplication.main(OpensslTestApplication.java:23)\n    at java.base@21.0.7/java.lang.invoke.LambdaForm$DMH/sa346b79c.invokeStaticInit(LambdaForm$DMH)\n    Suppressed: java.lang.UnsatisfiedLinkError: Can't load library: /tmp/libnetty_tcnative_linux_aarch_6413650046406937568812.so\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.jdk.NativeLibrarySupport.loadLibraryAbsolute(NativeLibrarySupport.java:100)\n        at java.base@21.0.7/java.lang.ClassLoader.loadLibrary(ClassLoader.java:114)\n        at java.base@21.0.7/java.lang.Runtime.load0(Runtime.java:852)\n        at java.base@21.0.7/java.lang.System.load(System.java:2025)\n        at io.netty.util.internal.NativeLibraryUtil.loadLibrary(NativeLibraryUtil.java:36)\n        at io.netty.util.internal.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:396)\n        at io.netty.util.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:218)\n        at io.netty.util.internal.NativeLibraryLoader.loadFirstAvailable(NativeLibraryLoader.java:105)\n        ... 4 more\n        Suppressed: java.lang.UnsatisfiedLinkError: Can't load library: /tmp/libnetty_tcnative_linux_aarch_6413650046406937568812.so\n            at org.graalvm.nativeimage.builder/com.oracle.svm.core.jdk.NativeLibrarySupport.loadLibraryAbsolute(NativeLibrarySupport.java:100)\n            at java.base@21.0.7/java.lang.ClassLoader.loadLibrary(ClassLoader.java:114)\n            at java.base@21.0.7/java.lang.Runtime.load0(Runtime.java:852)\n            at java.base@21.0.7/java.lang.System.load(System.java:2025)\n            at io.netty.util.internal.NativeLibraryUtil.loadLibrary(NativeLibraryUtil.java:36)\n            at java.base@21.0.7/java.lang.reflect.Method.invoke(Method.java:580)\n            at io.netty.util.internal.NativeLibraryLoader$1.run(NativeLibraryLoader.java:430)\n            at java.base@21.0.7/java.security.AccessController.executePrivileged(AccessController.java:129)\n            at java.base@21.0.7/java.security.AccessController.doPrivileged(AccessController.java:319)\n            at io.netty.util.internal.NativeLibraryLoader.loadLibraryByHelper(NativeLibraryLoader.java:422)\n            at io.netty.util.internal.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:388)\n            ... 6 more\n\n</code></pre>\n<p>I've used resource logging (<code>-H:Log=registerResource:3</code>) to verify that <code>META-INF/native/libnetty_tcnative_linux_aarch_64.so</code> is included, and from what I understand the fact that it's trying to load that file from /tmp with some random string appended means that it was able to find that file in the jar and extract it to /tmp. I'm building on my M2 MacBook Air and using Rancher Desktop.</p>\n<p>Any tips on how to proceed in debugging? It should be possible to use native OpenSSL in GraalVM native image, right?</p>\n<p>My app class:</p>\n<pre><code>@SpringBootApplication\n@ImportRuntimeHints(OpensslTestApplication.NettyNativeRuntimeHints.class)\npublic class OpensslTestApplication {\n\n    public static void main(String[] args) {\n        System.setProperty(&quot;io.netty.native.workdir&quot;, &quot;/tmp&quot;);\n\n        if (!OpenSsl.isAvailable()) {\n            System.err.println(&quot;❌ OpenSSL unavailable:&quot;);\n            OpenSsl.unavailabilityCause().printStackTrace();\n        } else {\n            System.out.println(&quot;✅ OpenSSL available: &quot; + OpenSsl.versionString());\n        }\n\n        SpringApplication.run(OpensslTestApplication.class, args);\n    }\n\n    static class NettyNativeRuntimeHints implements RuntimeHintsRegistrar {\n        @Override\n        public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n            hints.jni().registerType(OpenSsl.class);\n            hints.resources().registerPattern(&quot;META-INF/native/libnetty_tcnative_linux_aarch_64.so&quot;);\n            hints.resources().registerPattern(&quot;test.p12&quot;);\n        }\n    }\n\n    @Bean\n    RouterFunction&lt;ServerResponse&gt; route() {\n        return RouterFunctions.route(RequestPredicates.GET(&quot;/&quot;), req -&gt;\n                ServerResponse.ok().body(Mono.just(&quot;Hello from native SSL!&quot;), String.class)\n        );\n    }\n\n}\n</code></pre>\n<p>build.gradle:</p>\n<pre><code>import org.springframework.boot.gradle.plugin.SpringBootPlugin\n\nplugins {\n    id 'java'\n    id 'org.springframework.boot' version '3.5.3'\n    id 'org.graalvm.buildtools.native' version '0.10.6'\n}\n\njava {\n    toolchain {\n        languageVersion = JavaLanguageVersion.of(21)\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation platform(SpringBootPlugin.BOM_COORDINATES)\n    implementation 'org.springframework.boot:spring-boot-starter-webflux'\n\n    implementation(&quot;io.netty:netty-tcnative-boringssl-static:2.0.72.Final:linux-aarch_64&quot;)\n    // Adding this makes OpenSSL available during aot processing when buliding on macos, not sure if necessary\n    implementation(&quot;io.netty:netty-tcnative-boringssl-static:2.0.72.Final:osx-aarch_64&quot;)\n}\n</code></pre>\n"},{"tags":["reactjs","next.js"],"owner":{"account_id":21011563,"reputation":722,"user_id":15440045,"user_type":"registered","profile_image":"https://i.sstatic.net/AkqmC.jpg?s=256","display_name":"Seven","link":"https://stackoverflow.com/users/15440045/seven"},"is_answered":false,"view_count":30,"answer_count":1,"score":0,"last_activity_date":1752060653,"creation_date":1740718186,"question_id":79474536,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79474536/classname-prop-isnt-recognized-by-typescript-for-next-image-image-component","title":"className prop isn&#39;t recognized by typescript for next/image Image component","body":"<p>I have a next application and I am using <code>next/Image</code> Image component like below:</p>\n<pre class=\"lang-none prettyprint-override\"><code>&lt;Image\n    src={user?.profilePic || ''}\n    alt={user?.profilePic || ''}\n    width={40}\n    height={40}\n    className=&quot;rounded-full object-cover&quot;\n/&gt;\n</code></pre>\n<p>my IDE (VS Code) highlights the prop <code>className</code> and shows this error:</p>\n<pre><code>Type '{ src: string; alt: string; width: number; height: number; className: string; }' is not assignable to type 'IntrinsicAttributes &amp; Omit&lt;DetailedHTMLProps&lt;ImgHTMLAttributes&lt;HTMLImageElement&gt;, HTMLImageElement&gt;, &quot;ref&quot; | ... 5 more ... | &quot;srcSet&quot;&gt; &amp; { ...; } &amp; RefAttributes&lt;...&gt;'.\n  Property 'className' does not exist on type 'IntrinsicAttributes &amp; Omit&lt;DetailedHTMLProps&lt;ImgHTMLAttributes&lt;HTMLImageElement&gt;, HTMLImageElement&gt;, &quot;ref&quot; | ... 5 more ... | &quot;srcSet&quot;&gt; &amp; { ...; } &amp; RefAttributes&lt;...&gt;'.ts(2322)\n</code></pre>\n<p>The prop className should be recognizeable here. This error doesnt really crash the application, <strong>I'm just annoyed seeing that red squiggly line under the prop.</strong></p>\n<p>Here's the screenshot:</p>\n<p><a href=\"https://i.sstatic.net/pBNPWSmf.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/pBNPWSmf.png\" alt=\"enter image description here\" /></a></p>\n<p>My <code>next</code> version is <code>14.2.5</code>, in case that helps.</p>\n<p>Edit: I already looked over the internet in case this is asked somewhere else but I couldnt find anything.</p>\n"},{"tags":["html","css","flexbox"],"owner":{"account_id":42826095,"reputation":3,"user_id":30942081,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/d317df7be0702088813d49e667ea9644?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Jesus Lives","link":"https://stackoverflow.com/users/30942081/jesus-lives"},"is_answered":false,"view_count":62,"answer_count":1,"score":0,"last_activity_date":1752055348,"creation_date":1751986002,"last_edit_date":1751989708,"question_id":79694436,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79694436/i-cant-get-the-background-color-of-the-image-to-not-overflow-below-the-image-con","title":"I cant get the background color of the image to not overflow below the image container","body":"<p>I've tried setting different heights to the .card-image, to the image itself, to the ::after but nothing is working. The only thing that has kind of worked is setting the flex-basis to 0% in .card-container * {}, but then I'm left with an empty space above the image and using the transform translate doesn't really work either</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\" data-babel-preset-react=\"false\" data-babel-preset-ts=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>*,\n*:before,\n*:after {\n  box-sizing: border-box;\n}\n\n* {\n  padding: 0;\n  margin: 0;\n}\n\n.wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100dvh;\n  background-color: hsl(233, 47%, 7%);\n}\n\n.card-container {\n  background-color: hsl(244, 38%, 16%);\n  max-width: 67em;\n  border-radius: .5rem;\n  height: 50%;\n  overflow-y: hidden;\n  display: flex;\n  align-items: center;\n}\n\n.card-container * {\n  flex-basis: 50%;\n}\n\n.card-content {\n  padding: 4rem;\n}\n\n.card-content&gt;*+* {\n  margin-top: 2rem;\n}\n\nimg {\n  display: block;\n  max-width: 100%;\n  margin-inline: auto;\n}\n\nh1 {\n  color: white;\n  margin-bottom: 2rem;\n  font-weight: bolder;\n  font-size: 2.5rem;\n}\n\n.desc {\n  color: hsla(0, 0%, 100%, 0.75);\n  margin-bottom: 4rem;\n  font-size: 1.2rem;\n}\n\nspan {\n  color: hsl(277, 64%, 61%);\n}\n\n.stats {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-top: 3.75rem;\n}\n\n.stat-number {\n  color: white;\n  font-size: 1.6rem;\n  font-weight: 900;\n}\n\n.stat-desc {\n  color: hsla(0, 0%, 100%, 0.75);\n  margin-top: .5rem;\n  text-transform: uppercase;\n  font-size: .8rem;\n}\n\n.card-image {\n  position: relative;\n}\n\n.card-image::after {\n  content: \"\";\n  width: 100%;\n  height: 100%;\n  background: hsla(277, 94%, 49%, 0.323);\n  position: absolute;\n  inset: 0;\n}\n\n@media (max-width: 820px) {\n  .card-container {\n    flex-direction: column-reverse;\n    height: 90%;\n    width: 85%;\n  }\n\n  .card-container * {\n    flex-basis: 0%;\n  }\n\n  .card-content {\n    padding-top: 1rem;\n    padding-left: 2rem;\n    padding-right: 2rem;\n    padding-bottom: 1.5rem;\n    text-align: center;\n  }\n\n\n\n}</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!-- Feel free to remove these styles or customise in your own stylesheet 👍 --&gt;\n&lt;style&gt;\n  .attribution {\n    font-size: 11px;\n    text-align: center;\n  }\n\n  .attribution a {\n    color: hsl(228, 45%, 44%);\n  }\n&lt;/style&gt;\n\n&lt;main class=\"wrapper\"&gt;\n  &lt;div class=\"card-container\"&gt;\n    &lt;div class=\"card-col card-content\"&gt;\n      &lt;h1&gt;Get &lt;span&gt;insights&lt;/span&gt; that help your business grow.&lt;/h1&gt;\n      &lt;p class=\"desc\"&gt;Discover the benefits of data analytics and make better decisions regarding revenue, customer\n        experience, and overall efficiency.&lt;/p&gt;\n\n      &lt;div class=\"stats\"&gt;\n        &lt;div class=\"stat-item\"&gt;\n          &lt;p class=\"stat-number\"&gt;10k+&lt;/p&gt;\n          &lt;p class=\"stat-desc\"&gt;companies&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"stat-item\"&gt;\n          &lt;p class=\"stat-number\"&gt;314&lt;/p&gt;\n          &lt;p class=\"stat-desc\"&gt;templates&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"stat-item\"&gt;\n          &lt;p class=\"stat-number\"&gt;12M+&lt;/p&gt;\n          &lt;p class=\"stat-desc\"&gt;queries&lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"card-col card-image\"&gt;\n      &lt;img src=\"./images/image-header-desktop.jpg\" alt=\"\" aria-hidden=\"true\"&gt; &lt;!--I think this tells the screen reaser to ignore this LOOK UP!--&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/main&gt;</code></pre>\n</div>\n</div>\n</p>\n"},{"tags":["javascript","image","scaling"],"owner":{"account_id":42828045,"reputation":13,"user_id":30942922,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/7611763721a7e9ab9fd9a4830d05f0ae?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"JMzr","link":"https://stackoverflow.com/users/30942922/jmzr"},"is_answered":true,"view_count":58,"accepted_answer_id":79695014,"answer_count":1,"score":0,"last_activity_date":1752027793,"creation_date":1751980767,"last_edit_date":1751982630,"question_id":79694319,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79694319/fix-blank-space-at-the-top-of-image-js","title":"Fix blank space at the top of image (JS)","body":"<p>I'm using the Internet Archive BookReader&gt; <a href=\"https://github.com/internetarchive/bookreader\" rel=\"nofollow noreferrer\">https://github.com/internetarchive/bookreader</a>\nI've set up a book using images but at the top there is always a blank space</p>\n<p><img src=\"https://i.sstatic.net/jyTv2m7F.png\" alt=\"blankspace\" /></p>\n<p>This is controlled by JS file that has the following (screenshot is from images 1 and 2):</p>\n<p>I had the same problem with the bottom and was able to properly scale it by adjusting the height to 1130 but can't get rid of the extra space above.<br />\nThis uses some CSS but for what I understand the pages are controlled by the JS file i shared</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\" data-babel-preset-react=\"false\" data-babel-preset-ts=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Create the BookReader object\nfunction instantiateBookReader(selector, extraOptions) {\n  selector = selector || '#BookReader';\n  extraOptions = extraOptions || {};\n  var options = {\n    ppi: 100,\n    data: [\n      [{\n        width: 800,\n        height: 800,\n        uri: '/assets/images/Chiloe/Lomo.png'\n      }, ],\n      [{\n        width: 800,\n        height: 1130,\n        uri: '/assets/images/Chiloe/Portada Frente.png'\n      }, ],\n      [{\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/1.CanaldeChacao.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/2.CerroMirador.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/3.Museo de las Iglesias.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/4.Islotes.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/5.Quemchi.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/6.Aucar.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/7.Dalcahue.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/8.Castro.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/9.Cucao.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/10.Muelle.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/11.Gruta.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/12.Puqueldón.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/13.Chonchi.png'\n        },\n        {\n          width: 800,\n          height: 1130,\n          uri: '/assets/images/Chiloe/Portada Trasera.png'\n        },\n      ]\n    ],\n\n    // Book title and the URL used for the book title link\n    bookTitle: 'Cartografía poética de Chiloé',\n\n\n    // thumbnail is optional, but it is used in the info dialog\n    thumbnail: '/assets/images/Chiloe/Portada Frente.png',\n    // Metadata is optional, but it is used in the info dialog\n    metadata: [{\n        label: 'Title',\n        value: 'Cartografía Poética de Chiloé'\n      },\n      {\n        label: 'Author',\n        value: 'Jairo Manzur'\n      },\n      {\n        label: 'Demo Info',\n        value: ' Este poemario fue escrito en el 2020 y representa visualmente los diferentes lugares en los que estuve en la isla de Chiloé.'\n      },\n    ],\n\n    // Override the path used to find UI images\n    imagesBaseURL: '../assets/images/',\n\n    ui: 'full', // embed, full (responsive)\n\n    el: selector,\n  };\n  $.extend(options, extraOptions);\n  var br = new BookReader(options);\n  br.init();\n}</code></pre>\n</div>\n</div>\n</p>\n"},{"tags":["javascript","html","image","canvas"],"owner":{"account_id":20883941,"reputation":171,"user_id":15857504,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/a-/AOh14GjgcUc-eFMrn8DFJ5iIOO2FMx85dDACoUPWm4HZ9A=k-s256","display_name":"Alice","link":"https://stackoverflow.com/users/15857504/alice"},"is_answered":false,"view_count":111,"answer_count":1,"score":2,"last_activity_date":1752024993,"creation_date":1749620087,"last_edit_date":1749795234,"question_id":79661435,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79661435/aligning-reflected-rotated-image-to-the-bottom-right-or-top-right-etc-of-a","title":"Aligning reflected, rotated image to the bottom right (or top right, etc.) of a shape outline with transforms/dealing with rotated bounds","body":"<p>update: Everything works except getMatrixDirection, see the end of the question.</p>\n<p>I take arbitrary lines (any angle) and create shapes around them, some of which are reflected across those lines. The shapes can be triangular or quadrilateral, including non-parallelograms. My code to calculate the reflected points works, and I draw these points onto a canvas, clip, and stroke. Then I need to render the texture flipped and rotated to correspond to these points. I create a transform with DOMMatrix, using rotate and scale to create a reflection (flip) about the line and translating so the image aligns with the outline, which doesn't work.</p>\n<p>Because the drawing orientation of the canvas sometimes (but not always) switches, I tried translating to the maxX/Y, but this runs into problems with non-axis-aligned shapes. The maxX, maxY float outside the shape. Using minX/Y for the top left also fails, which you can see looking at the second of my test cases in the example. This could mean the original bounding box isn't correct either.</p>\n<p>I also tried using closest points on the new shape, with better results. But this still failed noticeably on shapes where the slope of the bottom edge was positive, since the bottom right point would have a smaller minY than the bottom left (so then the image wouldn't be drawn low enough).</p>\n<p>I don't think I can just perform math on the height/width of the image, because the shapes are recursively folded, so they might only represent fractions of the canvas. I need the images to sit within the exact bounds dictated by calculating the reflected points (which are hardcoded in my example, sorry).</p>\n<p>I made a more minimal version of my code to show here. It just has a few predefined test lines/shapes and it doesn't cover all scenarios unfortunately. The original code is way too big to post. The part of the canvas that reads '1' should draw from the origin.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\" data-babel-preset-react=\"false\" data-babel-preset-ts=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>\"use strict\";\n    const canvasWidth = 600;\n    const canvasHeight = 830;\n    const pieces = [\n      [{\n        points: [new DOMPoint(140, 50), new DOMPoint(140.00000000000003, -90), new DOMPoint(90.00000000000001, -90), new DOMPoint(90, 0), ],\n        line: {\n          start: new DOMPoint(283.6663192636163, 193.66631926361632),\n          end: new DOMPoint(-52.666319263616316, -142.66631926361632)\n        },\n        original: [new DOMPoint(140, 50), new DOMPoint(0, 50), new DOMPoint(0, 0), new DOMPoint(90, 0), ],\n        intersects: [new DOMPoint(90, 0), new DOMPoint(140, 50), ],\n        origTopLeft: new DOMPoint(0, 0),\n        width: 50.00000000000003,\n        height: 50.00000000000003\n      }, {\n        points: [new DOMPoint(158.36517719568567, 44.67326250912334), new DOMPoint(163.97896049896048, -53.783451143451146), new DOMPoint(213.82095634095634, -49.58802494802492), new DOMPoint(211.1386748844376, -2.5451301597599514), ],\n        line: {\n          start: new DOMPoint(252.24682141160773, -39.3261033682806),\n          end: new DOMPoint(101.75317858839227, 95.3261033682806)\n        },\n        original: [new DOMPoint(158.36517719568567, 44.67326250912335), new DOMPoint(256.8378378378378, 50), new DOMPoint(258.18918918918916, -1.6317320576126618e-15), new DOMPoint(211.1386748844376, -2.5451301597599563), ],\n        intersects: [new DOMPoint(211.1386748844376, -2.5451301597599514), new DOMPoint(158.36517719568567, 44.67326250912334), ],\n        origTopLeft: new DOMPoint(158.36517719568567, -2.5451301597599563),\n        width: 55.45577914527067,\n        height: 55.45577914527067\n      }, {\n        points: [new DOMPoint(198.38255973344914, 8.868236027966603), new DOMPoint(-153.64897521683866, 5.578032470538176), new DOMPoint(-154.11627140114496, 55.57584876561373), new DOMPoint(143.07549812764987, 58.3535016752606), ],\n        line: {\n          start: new DOMPoint(436.3443301443184, -204.04492697123226),\n          end: new DOMPoint(-82.3443301443184, 260.04492697123226)\n        },\n        original: [new DOMPoint(198.3825597334491, 8.868236027966553), new DOMPoint(162.65825355141538, 359.09787638799855), new DOMPoint(112.9163540869709, 354.0240772523315), new DOMPoint(143.0754981276499, 58.353501675260645), ],\n        intersects: [new DOMPoint(143.07549812764987, 58.3535016752606), new DOMPoint(198.38255973344914, 8.868236027966603), ],\n        origTopLeft: new DOMPoint(112.9163540869709, 8.868236027966553),\n        width: 352.49883113459407,\n        height: 352.49883113459407\n      }, ],\n      [{\n        points: [new DOMPoint(183, 0), new DOMPoint(-115.80000000000018, -398.4000000000001), new DOMPoint(-155.80000000000018, -368.4000000000001), new DOMPoint(158, 50), ],\n        line: {\n          start: new DOMPoint(466.81944546997806, -567.6388909399561),\n          end: new DOMPoint(-126.81944546997806, 619.6388909399561)\n        },\n        original: [new DOMPoint(183.00000000000003, 0), new DOMPoint(681, 0), new DOMPoint(681, 50), new DOMPoint(158, 50), ],\n        intersects: [new DOMPoint(158, 50), new DOMPoint(183, 0), ],\n        originalTopLeft: new DOMPoint(158, 0),\n        width: 338.8000000000002,\n        height: 338.8000000000002\n      }, ],\n      [{\n        points: [new DOMPoint(157.50666666666666, 24.98461538461538), new DOMPoint(232.01174895512395, 458.84515237596656), new DOMPoint(182.7330781575854, 467.307575458501), new DOMPoint(121.1733333333333, 108.830769230769), ],\n        line: {\n          start: new DOMPoint(358.8607804360353, -439.6787240831585),\n          end: new DOMPoint(-43.86078043603533, 489.6787240831585)\n        },\n        original: [new DOMPoint(157.50666666666666, 24.9846153846154), new DOMPoint(-210.00917431192647, 267.30275229357795), new DOMPoint(-182.48623853211006, 309.045871559633), new DOMPoint(121.17333333333352, 108.83076923076914), ],\n        intersects: [new DOMPoint(121.1733333333333, 108.830769230769), new DOMPoint(157.50666666666666, 24.98461538461538), ],\n        originalTopLeft: new DOMPoint(-210.00917431192647, 24.9846153846154),\n        width: 110.83841562179065,\n        height: 110.83841562179065\n      }, {\n        points: [new DOMPoint(118.49999999999997, 49.99999999999999), new DOMPoint(207.78082191780817, 127.91780821917807), new DOMPoint(240.6575342465753, 90.24657534246575), new DOMPoint(137.25, -4.9897642155143516e-15), ],\n        line: {\n          start: new DOMPoint(199.2848941516392, -165.42638440437122),\n          end: new DOMPoint(55.71510584836079, 217.42638440437122)\n        },\n        original: [new DOMPoint(118.5, 50), new DOMPoint(0, 50), new DOMPoint(0, 0), new DOMPoint(137.25, 0), ],\n        intersects: [new DOMPoint(137.25, -4.9897642155143516e-15), new DOMPoint(118.49999999999997, 49.99999999999999), ],\n        originalTopLeft: new DOMPoint(0, 0),\n        width: 122.15753424657532,\n        height: 122.15753424657532\n      }]\n    ];\n\n    // reflect, rotate by angle of the longest edge of the pre-reflected shape so that the image renders at the right angle on the page\n\n    function getReflectionMatrix(piece, ctx) {\n      const {\n        line,\n        original,\n        points,\n        intersects\n      } = piece;\n      const anchor = intersects[0]; // point where the line and the other edges meet, used as an origin for reflection\n\n      const display = new DOMMatrix();\n      reflectMatrix(display, line, anchor);\n      rotateMatrix(display, original, anchor); // i do this so the image shows up at the right angle on the canvas\n      translateMatrix(display, original, points, ctx);\n      return display;\n    }\n\n    function reflectMatrix(matrix, line, anchor) {\n      const radians = getAngleFromOrigin(line);\n      const angle = getDegreesFromRadians(radians);\n\n      matrix.translateSelf(anchor.x, anchor.y);\n      matrix.rotateSelf(angle);\n      matrix.scaleSelf(1, -1);\n      matrix.rotateSelf(-angle);\n    }\n\n    function rotateMatrix(matrix, originalPoints, anchor) {\n      const longestEdgeAngle = getLongestEdgeAngle(originalPoints);\n      const degrees = getDegreesFromRadians(longestEdgeAngle);\n\n      matrix.rotateSelf(degrees);\n      matrix.translateSelf(-anchor.x, -anchor.y);\n    }\n\nfunction translateMatrix(matrix, originalPoints, newPoints, ctx) {\n  const pt0T = new DOMPoint(0, 0).matrixTransform(matrix);\n  const { pointsUp, pointsLeft } = getMatrixDirection(matrix);\n  const corners = getRotatedBoundingBox(newPoints);\n\n  let d = \"topLeft\";\n  if (pointsUp &amp;&amp; pointsLeft) d = \"bottomRight\";\n  if (pointsUp &amp;&amp; !pointsLeft) d = \"bottomLeft\";\n  if (pointsLeft &amp;&amp; !pointsUp) d = \"topRight\";\n  const target = corners[d];\n\n  const dx = target.x - pt0T.x;\n  const dy = target.y - pt0T.y;\n  const translated = new DOMMatrix().translateSelf(dx, dy);\n  matrix.preMultiplySelf(translated);\n\n  const debug = corners.topLeft, debug1 = corners.topRight, debug2 = corners.bottomLeft, debug3 = corners.bottomRight;\n  drawDebugMarker(debug.x, debug.y, \"blue\", ctx);\n  drawDebugMarker(debug1.x, debug1.y, \"red\", ctx);\n  drawDebugMarker(debug2.x, debug2.y, \"green\", ctx);\n  drawDebugMarker(debug3.x, debug3.y, \"orange\", ctx);\n  drawDebugMarker(target.x, target.y, \"purple\", ctx);\n}\n\n    // rotated bounding box helpers\n\nfunction getRotatedBoundingBox(points) {\n    const { angle, corners, width, height } = getBestBox(points);\n    const cos = Math.cos(-angle);\n    const sin = Math.sin(-angle);\n    const unrotated = corners.map(point =&gt; rotatePoint(point, sin, cos));\n    return sortCorners(unrotated);\n}\n\nfunction sortCorners(points) {\n  const sorted = points.toSorted((a, b) =&gt; a.y == b.y ? a.x - b.x : a.y - b.y);\n  const [pt1, pt2, pt3, pt4] = sorted;\n  const [topLeft, topRight] = pt1.x &lt; pt2.x ? [pt1, pt2] : [pt2, pt1];\n  const [bottomLeft, bottomRight] = pt3.x &lt; pt4.x ? [pt3, pt4] : [pt4, pt3];\n  return { topLeft, topRight, bottomRight, bottomLeft };\n}\n\n    function getBestBox(points) {\n        let bestArea = Infinity;\n        let bestBox;\n        for (let i = 0; i &lt; points.length; i++) {\n            const a = points[i];\n            const b = points[(i + 1) % points.length];\n            const angle = -Math.atan2(b.y - a.y, b.x - a.x);\n            const cos = Math.cos(angle);\n            const sin = Math.sin(angle);\n\n            const rotated = points.map(point =&gt; rotatePoint(point, sin, cos));\n            const { minX, maxX, minY, maxY } = getBoundingBox(rotated);\n            const { width, height } = getDimensions(rotated);\n            const area = width * height;\n            if (area &lt; bestArea) {\n                bestArea = area;\n                bestBox = makeBoundingBox(minX, maxX, minY, maxY, width, height, angle);\n            }\n        }\n        return bestBox;\n    }\n\n    function rotatePoint(point, sin, cos) {\n        const { x, y } = point;\n        return new DOMPoint(rotateX(x, y, sin, cos), rotateY(x, y, sin, cos));\n    }\n\n    function rotateX(x, y, sin, cos) {\n        return x * cos - y * sin;\n    }\n\n    function rotateY(x, y, sin, cos) {\n        return x * sin + y * cos;\n    }\n\n    function makeBoundingBox(minX, maxX, minY, maxY, width, height, angle) {\n        return {\n            corners: [\n                new DOMPoint(minX, minY), // tl\n                new DOMPoint(maxX, minY), // tr\n                new DOMPoint(maxX, maxY), // br\n                new DOMPoint(minX, maxY), // bl\n            ],\n            angle, width, height\n        };\n    }\n\n    // helpers for getting shape dimensions etc.\n\n    function getAngleFromOrigin(line) {\n      const {\n        start,\n        end\n      } = line;\n      const dx = end.x - start.x;\n      const dy = end.y - start.y;\n      return Math.atan2(dy, dx);\n    }\n\n    function getLongestEdgeAngle(points) {\n      let maxLength = 0;\n      let bestAngle = 0;\n      for (let i = 0; i &lt; points.length; i++) {\n        const a = points[i];\n        const b = points[(i + 1) % points.length];\n        const dx = b.x - a.x;\n        const dy = b.y - a.y;\n        const length = Math.hypot(dx, dy);\n        if (length &gt; maxLength) {\n          maxLength = length;\n          bestAngle = Math.atan2(dy, dx);\n        }\n      }\n      return bestAngle;\n    }\n\n    function getDegreesFromRadians(angle) {\n      const degrees = angle * 180 / Math.PI;\n      return ((degrees % 360) + 360) % 360;\n    }\n\n    function getTopLeft(points) {\n      const {\n        minX,\n        maxX,\n        minY,\n        maxY\n      } = getBoundingBox(points);\n      return new DOMPoint(minX, minY);\n    }\n\n    function getBoundingBox(points) {\n      const coordsX = points.map(point =&gt; point.x);\n      const minX = Math.min(...coordsX);\n      const maxX = Math.max(...coordsX);\n      const coordsY = points.map(point =&gt; point.y);\n      const minY = Math.min(...coordsY);\n      const maxY = Math.max(...coordsY);\n      return {\n        minX,\n        maxX,\n        minY,\n        maxY\n      };\n    }\n\n    function getDimensions(points) {\n      const {\n        minX,\n        maxX,\n        minY,\n        maxY\n      } = getBoundingBox(points);\n      const width = maxX - minX;\n      const height = maxY - minY;\n      return {\n        width,\n        height\n      };\n    }\n\n    function getMatrixDirection(matrix) {\n      const rightX = matrix.a;\n      const rightY = matrix.b;\n      const downX = matrix.c;\n      const downY = matrix.d;\n\n      const pointsLeft = Math.abs(rightX) &gt;= Math.abs(rightY) ? rightX &lt; 0 : rightY &lt; 0;\n      const pointsUp = Math.abs(downY) &gt;= Math.abs(downX) ? downY &lt; 0 : downX &lt; 0;\n      return {\n        pointsLeft,\n        pointsUp\n      };\n    }\n\n    function findClosestPoint(points, x, y) {\n      let minDist = Infinity;\n      let closest = points[0];\n      for (const point of points) {\n        const dist = Math.hypot(point.x - x, point.y - y);\n        if (dist &lt; minDist) {\n          minDist = dist;\n          closest = point;\n        }\n      }\n      return closest;\n    }\n\n    // drawing\n\n    function loopThroughPieces(test, ctx) {\n      for (let i = 0; i &lt; test.length; i++) {\n        ctx.setTransform(canvasTransform);\n        const piece = test[i];\n        const colour = getColour(i);\n        const display = getReflectionMatrix(piece, ctx);\n        drawPiece(piece, colour, display, ctx);\n      }\n    }\n\n    function getColour(i) {\n      // red comes first\n      const hue = (i * 45) % 360;\n      const lightness = 100 - (40 + 10);\n      const alpha = 0.5;\n      return `hsla(${hue}, 90%, ${lightness}%, ${alpha})`;\n    }\n\n    function drawPiece(piece, colour, display, ctx) {\n      ctx.save();\n      tracePiecePath(piece.points, ctx);\n      ctx.globalAlpha = 0.65;\n      //ctx.clip(); // it's supposed to be clipped, but i unclipped for visualisation, since sometimes the image floats outside of the outline\n\n      ctx.setTransform(canvasTransform.multiply(display));\n      ctx.drawImage(image, 0, 0, image.width, image.height);\n\n      ctx.strokeStyle = colour;\n      ctx.lineWidth = 3;\n      ctx.globalAlpha = 1;\n      ctx.stroke();\n\n      ctx.restore();\n      ctx.save();\n    }\n\n    function tracePiecePath(points, ctx) {\n      ctx.beginPath();\n      const firstPoint = points[0];\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      points.slice(1).forEach(point =&gt; {\n        ctx.lineTo(point.x, point.y);\n      });\n      ctx.closePath();\n    }\n\n    function drawDebugMarker(x, y, colour, ctx) {\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, 2 * Math.PI);\n      ctx.fillStyle = colour;\n      ctx.fill();\n    }\n\n    // everything below is just assembling test cases etc. and rendering them\n\n    function makeCanvasTransform() {\n      canvasTransform.scaleSelf(0.6, 0.6);\n      canvasTransform.translateSelf(canvasWidth / 2, canvasHeight / 2);\n    }\n\n    function drawDebugImage() {\n      const imgCtx = image.getContext(\"2d\");\n      imgCtx.fillStyle = \"white\";\n      imgCtx.fillRect(0, 0, image.width, image.height);\n      imgCtx.font = \"20px arial\";\n      imgCtx.textAlign = \"center\";\n      imgCtx.fillStyle = \"black\";\n      const segmentWidth = image.width / 12;\n      let offsetX = 0;\n      for (let i = 0; i &lt; Math.ceil(image.width / segmentWidth); i++) {\n        imgCtx.strokeRect(offsetX, 0, segmentWidth, image.height);\n        imgCtx.fillText(i + 1, offsetX + segmentWidth / 2, image.height / 2);\n        offsetX += segmentWidth;\n      }\n    }\n\n    function gatherCtxs() {\n      const ctxs = [];\n      for (let i = 0; i &lt; pieces.length; i++) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n        canvases.appendChild(canvas);\n        if (i % 2 == 1) {\n          const br = document.createElement(\"br\");\n          canvases.appendChild(br);\n        }\n        ctxs.push(canvas.getContext(\"2d\"));\n      }\n      return ctxs;\n    }\n\n    const image = document.getElementById(\"image\");\n    const canvases = document.getElementById(\"canvases\");\n    const canvasTransform = new DOMMatrix();\n\n    drawDebugImage();\n    makeCanvasTransform();\n    const ctxs = gatherCtxs();\n    for (let i = 0; i &lt; pieces.length; i++) {\n      loopThroughPieces(pieces[i], ctxs[i]);\n    }</code></pre>\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>canvas {\n  border: 1px solid grey;\n  margin: 2px;\n}</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p&gt;&lt;canvas id=\"image\" width=\"680\" height=\"50\"&gt;&lt;/canvas&gt;&lt;/p&gt;\n&lt;p id=\"canvases\"&gt;&lt;/p&gt;</code></pre>\n</div>\n</div>\n</p>\n<p>Thank you for reading! :)</p>\n<p>edit: Okay, so I tried to implement something called rotating calipers to get the tightest width and height possible and I'm getting the correct values, except width and height are along the wrong axes for some of them due to the rotation.</p>\n<p>So, because of that I'm adjusting for the angle (I don't know if it's too naïvely), then adding width and height where necessary to get the other corners. That seems to solve one problem (fingers crossed), but leaves the problem of picking the correct origin.</p>\n<p>I drew the caliper corners on the canvas and the point I want (as far as I can tell) is within them for all the test cases, so I need a logical way to select the right corner, because rotation changes the relationship between x/y magnitude on the canvas and order in the list of corners.</p>\n<p>Updated snippet (I think)</p>\n<p>edit2: I mostly solved the problem, not posting it as an answer yet because there's still a big piece of the puzzle missing.</p>\n<p>I sorted the corners based on their coordinates in the normal (unrotated) bounding box, then snapped to the appropriate one based on pointsUp/pointsLeft. I'm not sure if there's a better way to do it, but it works, and it snaps properly to the sides of the outline.</p>\n<p>The problem is pointsUp/pointsLeft is wrong for one of the tests (the last test, the orange piece), so that the image is drawn up from the top right instead of up from the bottom right. <strong>This means getMatrixDirection is wrong</strong>, but I don't know what to do instead. The function is intended to extract the left/right and up/down orientation that an image will draw from the origin on the canvas.</p>\n"},{"tags":["genexus","genexus-sd","genexus-gam"],"owner":{"account_id":42919587,"reputation":1,"user_id":30986401,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/fb975c19ee76862dda9a1b145e208d77?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"RodrigoLaraH","link":"https://stackoverflow.com/users/30986401/rodrigolarah"},"is_answered":false,"view_count":22,"answer_count":0,"score":0,"last_activity_date":1752010602,"creation_date":1752010602,"question_id":79694852,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79694852/validate-specific-image-size-in-genexus-18u11-300x300dip","title":"Validate specific image size in GeneXus 18u11 (300x300dip)","body":"<p>good morning.</p>\n<p>I'm working with GeneXus 18 Update 11 and using WorkWithPlus. I would like to know if it's possible to require that the user only upload images with an exact size of 300x300 dip in an Image data type field.</p>\n<p>Specifically, I need:</p>\n<p>To prevent uploading images that are either larger or smaller than 300x300dip.</p>\n<p>To display a validation message if the image doesn't meet this requirement.</p>\n<p>And, if WorkWithPlus has any built-in feature to make this easier, I would like to know how to use it.</p>\n<p>Thanks in advance for your support.</p>\n"},{"tags":["javascript","reactjs","image","appwrite"],"owner":{"account_id":29569197,"reputation":1,"user_id":22661832,"user_type":"registered","profile_image":"https://i.sstatic.net/9QFYCXoK.png?s=256","display_name":"Lahiru Anushka","link":"https://stackoverflow.com/users/22661832/lahiru-anushka"},"is_answered":true,"view_count":243,"accepted_answer_id":79180223,"answer_count":2,"score":0,"last_activity_date":1752001946,"creation_date":1731397213,"question_id":79180207,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79180207/appwrite-image-preview-not-working-despite-valid-file-ids","title":"Appwrite: Image Preview Not Working Despite Valid File IDs","body":"<p>I'm using Appwrite for my project and have implemented a service to upload images and retrieve their previews. The image IDs are correctly stored in my database after uploading, but when I attempt to fetch the image preview, it returns an undefined URL.</p>\n<p>Here’s a brief overview of my implementation:</p>\n<ol>\n<li>Uploading Images: I upload images to Appwrite storage using the\nfollowing method:</li>\n</ol>\n\n<pre class=\"lang-js prettyprint-override\"><code>async uploadFile(file) {\n    if (!(file instanceof File)) {\n        throw new Error(&quot;Invalid file type.&quot;);\n    }\n\n    try {\n        return await this.bucket.createFile(\n            conf.appwriteListingImagesBucketId,\n            ID.unique(),\n            file\n        );\n    } catch (error) {\n        console.error(&quot;Appwrite service :: uploadFile() :: &quot;, error);\n        throw new Error(&quot;Failed to upload file.&quot;);\n    }\n}\n</code></pre>\n\n<ol start=\"2\">\n<li>Fetching Image Preview: I attempt to get the preview using this\nmethod:</li>\n</ol>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\" data-babel-preset-react=\"false\" data-babel-preset-ts=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>async getFilePreview(fileId) {\n    if (!fileId) {\n        throw new Error(\"File ID is required.\");\n    }\n\n    try {\n        const result = await this.bucket.getFilePreview(\n            conf.appwriteListingImagesBucketId,\n            fileId,\n            1800, // width\n            0, // height (ignored when 0)\n            \"center\", // crop center\n            \"90\", // compression\n            5, // border width\n            \"CDCA30\", // border color\n            15, // border radius\n            1, // full opacity\n            0, // no rotation\n            \"FFFFFF\", // background color\n            \"jpg\" // output format\n        );\n\n        return result.href; // Return the URL for the image preview\n    } catch (error) {\n        console.error(\"Error fetching file preview:\", error);\n        throw new Error(\"Failed to fetch file preview.\");\n    }\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<ol start=\"3\">\n<li>Using the Service: In my React component, I call getFilePreview like\nthis:</li>\n</ol>\n\n<pre class=\"lang-js prettyprint-override\"><code>useEffect(() =&gt; {\n    const fetchPreviewUrl = async () =&gt; {\n        try {\n            const url = await listingImageService.getFilePreview(listing.images[0]);\n            console.log(&quot;url&quot;, url);\n            setPreviewUrl(url);\n        } catch (error) {\n            console.error(&quot;Error fetching image preview:&quot;, error);\n        }\n    };\n    fetchPreviewUrl();\n}, []);\n</code></pre>\n\n<p>Problem:\nThe listing. images contain a valid file ID.\nThe console logs indicate that getFilePreview is being called, but the resulting URL is undefined.\nI've checked that the bucket ID and permissions are correct.\nAdditional Information:\nI’ve tested with various image formats (JPEG, PNG) and ensured that my Appwrite server is running correctly.\nAside from the expected error handling, there are no apparent errors in the console.</p>\n<p>Question:\nWhat could be causing the image preview to return an undefined URL? Are there any known issues with Appwrite's getFilePreview method or specific configurations I should check?</p>\n"},{"tags":["ios","swift","uitextview","nsattributedstring"],"owner":{"account_id":5733983,"reputation":2820,"user_id":4528716,"user_type":"registered","accept_rate":39,"profile_image":"https://graph.facebook.com/938373992847560/picture?type=large","display_name":"Damian Dudycz","link":"https://stackoverflow.com/users/4528716/damian-dudycz"},"is_answered":true,"view_count":2888,"answer_count":3,"score":4,"last_activity_date":1751997580,"creation_date":1459592674,"last_edit_date":1459598161,"question_id":36372042,"content_license":"CC BY-SA 3.0","link":"https://stackoverflow.com/questions/36372042/autoresizing-image-in-nsattributedstring-with-uitextview","title":"Autoresizing Image in NSAttributedString with UITextView","body":"<p>Im trying to make <code>UITextView</code> display rtfd document with image in it. The problem is, that the image is overlapping the frame of <code>UITextView</code> - it has larger width. I need this image to scale to width of <code>UITextView</code>. This is how I load the string:</p>\n\n<pre><code>if let text = try? NSMutableAttributedString(URL: NSBundle.mainBundle().URLForResource(\"License agreement\", withExtension: \"rtfd\")!, options: [NSDocumentTypeDocumentAttribute : NSRTFDTextDocumentType], documentAttributes: nil) {\n\n        textView.attributedText = text\n    }\n</code></pre>\n\n<p>I also tried with webarchive file with <code>img style=\"width: 100%\"</code>, but this also didn't work.</p>\n\n<p>What is the best way to display rtfd or other document in such a way, so that images are scaled to fit the width?</p>\n"},{"tags":["macos","swiftui"],"owner":{"account_id":1511994,"reputation":16767,"user_id":1413856,"user_type":"registered","accept_rate":47,"profile_image":"https://i.sstatic.net/vYiIK.jpg?s=256","display_name":"Manngo","link":"https://stackoverflow.com/users/1413856/manngo"},"is_answered":false,"view_count":148,"answer_count":2,"score":1,"last_activity_date":1751997420,"creation_date":1731893558,"question_id":79198492,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79198492/how-do-i-customise-the-button-image-in-a-menu-item","title":"How do I customise the button image in a menu item?","body":"<p>I’m working on a macOS application, and I need to use a menu.</p>\n<p>I can customise the font size and colour of the text of the menu item buttons, but I can’t see how to make a difference with the image in the buttons.</p>\n<p>Here is some sample code:</p>\n<pre class=\"lang-swift prettyprint-override\"><code>Button(action: { print(&quot;Something&quot;) }) {\n    HStack {\n        Image(systemName: &quot;questionmark.circle&quot;)\n            .resizable()\n            .frame(width: 24, height: 24)\n            .foregroundColor(.blue)\n        Text(&quot;Something&quot;)\n            .font(.system(size: 24))\n    }\n}\nMenu(&quot;☰&quot;) {\n    Button(action: { print(&quot;Something&quot;) }) {\n        HStack {\n            Image(systemName: &quot;questionmark.circle&quot;)\n                .resizable()\n                .frame(width: 24, height: 24)\n                .foregroundColor(.blue)\n            Text(&quot;Something&quot;)\n                .font(.system(size: 24))\n        }\n    }\n    Button(action: { print(&quot;Something Else&quot;) }) {\n        HStack {\n            Image(systemName: &quot;exclamationmark.circle&quot;)\n            Text(&quot;Something Else&quot;)\n                .font(.system(size: 32))\n        }\n    }\n}\n.menuStyle(.button)\n.buttonStyle(.plain)\n</code></pre>\n<p>I’ve included a styled button before the menu to illustrate that I can make changes to the button, but those changes don’t work for the buttons inside the menu:</p>\n<p><a href=\"https://i.sstatic.net/Z4rkTjxm.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/Z4rkTjxm.png\" alt=\"enter image description here\" /></a></p>\n<p>How can I make changes to the button images in the menu items?</p>\n"},{"tags":["asp.net","image"],"owner":{"account_id":53211,"reputation":17274,"user_id":159072,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/f19a3ac761df525d20390cf126e6219e?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"user366312","link":"https://stackoverflow.com/users/159072/user366312"},"is_answered":true,"view_count":79997,"accepted_answer_id":1324812,"answer_count":11,"score":8,"last_activity_date":1751993525,"creation_date":1251148217,"last_edit_date":1251148668,"question_id":1324801,"content_license":"CC BY-SA 2.5","link":"https://stackoverflow.com/questions/1324801/asp-net-image-is-not-showing-up","title":"ASP.NET - Image is not showing up","body":"<p>I have placed an image on the master page.</p>\n\n<p>I see the image at design time.</p>\n\n<p>But I don't see the image at run time.</p>\n\n<p>What can be the problem?</p>\n\n<p>I have tried to place the image on an image box. But it didn't work either.</p>\n\n<pre><code>&lt;%@ Master Language=\"C#\" AutoEventWireup=\"true\" CodeBehind=\"MasterPage.master.cs\" Inherits=\"Ice_Web_Portal.UI.MasterPage\" EnableTheming=\"true\" %&gt;\n\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" &gt;\n&lt;head runat=\"server\"&gt;\n    &lt;title&gt;.::ICE Web Portal::.&lt;/title&gt;\n    &lt;link href=\"App_Themes/SmokeAndGlass/SmokeAndGlass.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body &gt;\n    &lt;form id=\"form1\" runat=\"server\"&gt;\n        &lt;table style=\"position: static\"&gt;\n            &lt;tr&gt;\n                &lt;td align=\"left\" colspan=\"2\"&gt;\n                    &lt;asp:Image ID=\"Image1\" runat=\"server\" ImageUrl=\"~/App_Themes/Banner.JPG\" /&gt;&lt;/td&gt;\n                &lt;td&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td rowspan=\"2\"&gt;\n                    &lt;div&gt;\n                    &amp;nbsp;&lt;/div&gt;\n                    &amp;nbsp;&lt;/td&gt;\n                &lt;td style=\"width: 3px\"&gt;\n                    &lt;asp:LoginView ID=\"LoginView1\" runat=\"server\"&gt;\n                        &lt;LoggedInTemplate&gt;\n                            &lt;table style=\"width: 204px\"&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n                                        Login Status :&lt;/td&gt;\n                                    &lt;td&gt;\n                    &lt;asp:LoginStatus ID=\"LoginStatus1\" runat=\"server\" /&gt;\n                                    &lt;/td&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                &lt;/tr&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n                                        Login Name :&lt;/td&gt;\n                                    &lt;td&gt;\n                    &lt;asp:LoginName ID=\"LoginName1\" runat=\"server\" /&gt;\n                                    &lt;/td&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                &lt;/tr&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                &lt;/tr&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                    &lt;td&gt;\n                                    &lt;/td&gt;\n                                &lt;/tr&gt;\n                            &lt;/table&gt;\n                        &lt;/LoggedInTemplate&gt;\n                    &lt;/asp:LoginView&gt;\n                &lt;/td&gt;\n                &lt;td&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td style=\"width: 3px\"&gt;\n                    &lt;asp:ContentPlaceHolder ID=\"ContentPlaceHolder1\" runat=\"server\"&gt;\n                    &lt;/asp:ContentPlaceHolder&gt;\n                &lt;/td&gt;\n                &lt;td&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &amp;nbsp;&lt;/td&gt;\n                &lt;td style=\"width: 3px\"&gt;\n                &lt;/td&gt;\n                &lt;td&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"tags":["css","wordpress","woocommerce"],"owner":{"account_id":25748973,"reputation":41,"user_id":19501799,"user_type":"registered","profile_image":"https://lh3.googleusercontent.com/a/AItbvmnLNVUaUyQeFZ9hOePaRbbe79qpUWd3vCpY4W-G=k-s256","display_name":"Simon Bonideco","link":"https://stackoverflow.com/users/19501799/simon-bonideco"},"is_answered":true,"view_count":3659,"answer_count":2,"score":0,"last_activity_date":1751985463,"creation_date":1657196462,"question_id":72897718,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/72897718/how-to-fit-different-size-images-to-box-in-woocommerce-single-product-page-ima","title":"How to fit different size images to &quot;box&quot; in Woocommerce single product page image slider","body":"<p>I stumbled upon one problem with WooCommerce single product page image sizes.\nProduct images are not the same size, that's why some of them crops.</p>\n<p>I added this css trying to fix this:</p>\n<pre><code>.woocommerce.single-product #content div.product div.images, .woocommerce.single-product div.product div.images, .woocommerce-page.single-product #content div.product div.images, .woocommerce-page.single-product div.product div.images {\n    min-height: 500px;\n    min-width: 650px;\n    max-height: 500px;\n    max-width: 650px;\n    }\n\n div.woocommerce-product-gallery__image.flex-active-slide{\nheight: 400px;\nobject-fit: cover;\n}\n</code></pre>\n<p>It puts the location and size of the photos slider and the active photo where I want them to be, but when I go through the photos, some of the photos get cropped. I need all the photos to fit to height (400px). The width should be automatically set so that the image is fully visible at 400px height. Maybe someone knows how to do it?</p>\n<p>Using WordPress + Elementor + Shoptimizer theme</p>\n<p>Link to single product page: <a href=\"https://bonideco.com/product/lawa-design-modernus-laikrodis-delta-azuolo-spalvos-su-juodomis-rodyklemis/\" rel=\"nofollow noreferrer\">https://bonideco.com/product/lawa-design-modernus-laikrodis-delta-azuolo-spalvos-su-juodomis-rodyklemis/</a></p>\n<p>Thanks a lot!</p>\n"},{"tags":["java","javafx"],"owner":{"account_id":34599290,"reputation":908,"user_id":26656564,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/882f996623517814360ba4bb403102e7?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"SilverCube","link":"https://stackoverflow.com/users/26656564/silvercube"},"is_answered":false,"view_count":62,"answer_count":1,"score":1,"last_activity_date":1751983865,"creation_date":1749794614,"question_id":79664409,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79664409/how-to-remove-drag-view-image-from-dragboard","title":"How to remove drag view image from Dragboard?","body":"<p>I need to perform a drag-and-drop operation and this is my test code:</p>\n<pre><code>public class TestFx extends Application {\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    public void start(Stage primaryStage) {\n        Circle circle = createCircle(&quot;#ff0000&quot;, &quot;#aa0000&quot;,100);\n        circle.setOnDragDetected((MouseEvent event) -&gt; {\n            System.out.println(&quot;Circle 1 drag detected&quot;);\n            Dragboard db = circle.startDragAndDrop(TransferMode.ANY);\n            ClipboardContent content = new ClipboardContent();\n            content.putString(&quot;Circle source text&quot;);\n            db.setContent(content);\n            db.setDragView(null);\n        });\n        circle.setOnMouseDragged((MouseEvent event) -&gt; {\n            event.setDragDetect(true);\n        });\n\n        Circle circle2 = createCircle(&quot;#00ff00&quot;, &quot;#00aa00&quot;,250);\n        circle2.setOnDragOver(new EventHandler&lt;DragEvent&gt;() {\n            public void handle(DragEvent event) {\n                if (event.getGestureSource() != circle2 &amp;&amp; event.getDragboard().hasString()) {\n                    event.acceptTransferModes(TransferMode.COPY_OR_MOVE);\n                }\n                event.consume();\n            }\n        });\n\n        circle2.setOnDragDropped((DragEvent event) -&gt; {\n            Dragboard db = event.getDragboard();\n            if (db.hasString()) {\n                System.out.println(&quot;Dropped: &quot; + db.getString());\n                event.setDropCompleted(true);\n            } else {\n                event.setDropCompleted(false);\n            }\n            event.consume();\n        });\n\n        Pane pane = new Pane();\n        pane.getChildren().add(circle);\n        pane.getChildren().add(circle2);\n\n        Scene scene = new Scene(pane, 400, 200, true);\n        primaryStage.setScene(scene);\n        primaryStage.setTitle(&quot;DragAndDrop&quot;);\n\n        primaryStage.show();\n    }\n\n    private Circle createCircle(String strokeColor, String fillColor, double x) {\n        Circle circle = new Circle();\n        circle.setCenterX(x);\n        circle.setCenterY(100);\n        circle.setRadius(50);\n        circle.setStroke(Color.valueOf(strokeColor));\n        circle.setStrokeWidth(5);\n        circle.setFill(Color.valueOf(fillColor));\n        return circle;\n    }\n}\n</code></pre>\n<p>and this is the result:</p>\n<p><a href=\"https://i.sstatic.net/3KQyMbkl.gif\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/3KQyMbkl.gif\" alt=\"enter image description here\" /></a></p>\n<p>As you see when performing drag and drop, an image of the file appears near the mouse cursor. As I understand this image is from Dragboard#dragView. Could anyone say how to remove this image?</p>\n"},{"tags":["r","r-markdown","knitr","pandoc","bookdown"],"owner":{"account_id":10854866,"reputation":1019,"user_id":7981566,"user_type":"registered","accept_rate":67,"profile_image":"https://www.gravatar.com/avatar/c947521cba6569e047e180c9eba17fa0?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"NicolasBourbaki","link":"https://stackoverflow.com/users/7981566/nicolasbourbaki"},"is_answered":false,"view_count":41,"answer_count":0,"score":0,"last_activity_date":1751971508,"creation_date":1751885161,"last_edit_date":1751971508,"question_id":79692729,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79692729/knitr-set-default-format-for-external-image-files-like-with-auto-pdf-option","title":"knitr: Set default format for external image files (like with auto_pdf option)","body":"<p>Is there a way to set the default graphics format for files given to <code>knitr</code>'s <code>include_graphics()</code> function?<br />\nIts <code>auto_pdf = TRUE</code> is close to what I want (i.e. it chooses PDF files over files with identical name, but different extension), except that it's limited to choosing PDF and not SVG or EMF files by default.</p>\n<p><code>pandoc</code> provides the command-line option <code>-default-image-extension</code>, which would be perfectly suited, but automatic choosing only works if no image extension is given in the <em>Markdown</em> syntax for images. However, <code>knitr</code> does generate <em>Markdown</em> output specifying the image format and this is then not affected by the <code>pandoc</code> option.</p>\n<p>This would allow easy switching between including higher quality vector graphics in output formats which support and raster graphics for other formats.</p>\n<p>A short example would look like this:</p>\n<pre><code>---\ntitle: &quot;Untitled&quot;\noutput: \n  powerpoint_presentation:\n    keep_md: yes\n    pandoc_args:\n      -- -default-image-extension=emf\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, dev='emf', fig.ext = 'emf')\n```\n\n# Slide with Plot\n\n```{r test}\n  knitr::include_graphics('external_figure.jpg')\n```\n</code></pre>\n"},{"tags":["image","video","gstreamer","pixel","rtsp"],"owner":{"account_id":1382999,"reputation":3412,"user_id":1315621,"user_type":"registered","accept_rate":81,"profile_image":"https://www.gravatar.com/avatar/f1f617ceba0c76f4d50e4494319a0af8?s=256&d=identicon&r=PG","display_name":"user1315621","link":"https://stackoverflow.com/users/1315621/user1315621"},"is_answered":false,"view_count":2336,"answer_count":0,"score":0,"last_activity_date":1751967910,"creation_date":1646761930,"last_edit_date":1751967910,"question_id":71399469,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/71399469/gstreamer-corrupted-image-from-rtsp-video-stream","title":"Gstreamer corrupted image from rtsp video stream","body":"<p>I am using an <code>rtpsrc</code> element to decode rtsp video streams. Since my pipeline is rather heavy and slow, I set the property <code>drop-on-latency</code> to <code>1</code> to avoid memory leak. Sometime I see some image pixelated / corrupted. Can this be the cause of such issue?</p>\n<p>EDIT: you can reproduce the following code. In order to run the code, you need to:</p>\n<ul>\n<li>Add your rtsp video url at line 149</li>\n<li>On line 150 you can select how many decoding bin you want to create using the stream above. Set the number of streams to 64. With 64 streams, the memory leak is evident in a few seconds using utilities such as top and htop. With just 1 stream you won’t notice the memory leak.</li>\n<li>If you uncomment line 38-39 you will solve the memory leak, but this will lead to corrupted video frames when connecting this video decoding bin to an actual Deepstream pipeline (with nvinfer, etc)</li>\n</ul>\n<p>NOTE: see updated code below</p>\n<pre class=\"lang-py prettyprint-override\"><code>import time\nimport traceback\n\nimport gi\ngi.require_version(&quot;Gst&quot;, &quot;1.0&quot;)\ngi.require_version(&quot;GstRtspServer&quot;, &quot;1.0&quot;)\nfrom gi.repository import GObject, Gst, GstRtspServer\n\nimport gc\nfrom threading import Thread\nimport pyds\nimport pygraphviz as pgv\n\n\nNVV4L2DECODER_NUM_EXTRA_SURFACES = 1\nNVVIDEOCONVERT_OUTPUT_BUFFERS = 1\n\n\n\nclass RtspSourceBin:\n    &quot;&quot;&quot; Class used to create a bin that decode an rtsp video stream.\n    &quot;&quot;&quot;\n\n    @classmethod\n    def create_rtsp_source_bin(cls, index: int, source_url: str, decoding_memory: str):\n        # SOURCE BIN\n        # Create a source GstBin to abstract this bin's content from the rest of the pipeline\n        bin_name = &quot;source-bin-%02d&quot; % index\n        rtsp_source_bin = Gst.Bin.new(bin_name)\n        if not rtsp_source_bin:\n            print(&quot; Unable to create source bin \\n&quot;)\n\n        # INTERNAL BIN ELEMENTS\n        rtspsrc = create_gst_elemement(&quot;rtspsrc&quot;, f&quot;rtspsrc_{index}&quot;)\n        rtspsrc.set_property(&quot;location&quot;, source_url)\n        rtspsrc.set_property(&quot;protocols&quot;, &quot;tcp&quot;)\n        # Uncomment the following two lines to prevent the memory leak (but this will cause corrupted video frames)\n        # rtspsrc.set_property(&quot;latency&quot;, 1000)\n        # rtspsrc.set_property(&quot;drop-on-latency&quot;, 1)\n        rtspsrc.set_property(&quot;timeout&quot;, 5000000)  # microseconds\n        rtspsrc.set_property(&quot;debug&quot;, 1)\n\n        rtph264depay = create_gst_elemement(&quot;rtph264depay&quot;, f&quot;rtph264depay_{index}&quot;)\n\n        if decoding_memory == &quot;cpu&quot;:\n            decoder, nvvideoconvert = cls._get_decoding_element_cpu(camera_index=index)\n        elif decoding_memory == &quot;cuda&quot;:\n            decoder, nvvideoconvert = cls._get_decoding_element_cuda_device(camera_index=index)\n        else:\n            raise ValueError()\n\n        # By converting images to RGBA we can download them from GPU whenever we want\n        caps_filter = create_gst_elemement(&quot;capsfilter&quot;, f&quot;filter_numpy_frame_{index}&quot;)\n        caps_filter.set_property(&quot;caps&quot;, Gst.Caps.from_string((f&quot;video/x-raw(memory:NVMM), format=RGBA&quot;)))\n\n        # RTSPSRC GHOST PAD\n        # rtspsrc will create a src pad once it starts decoding, for now we initialize a ghost pad\n        # to be linked to next elment in the bin\n        # We also add a callback on the signal &quot;pad-added&quot; to link the actual src pad when it is initialized\n        rtspsrc.add_pad(\n            Gst.GhostPad.new_no_target(&quot;src&quot;, Gst.PadDirection.SRC)\n        )\n        rtspsrc.connect(&quot;pad-added&quot;, cls.rtspsrc_callback_newpad, rtph264depay)\n\n        # ADD ELEMENTS TO THE BIN\n        Gst.Bin.add(rtsp_source_bin, rtspsrc)\n        Gst.Bin.add(rtsp_source_bin, rtph264depay)\n        Gst.Bin.add(rtsp_source_bin, decoder)\n        Gst.Bin.add(rtsp_source_bin, nvvideoconvert)\n        Gst.Bin.add(rtsp_source_bin, caps_filter)\n\n        # LINK ELEMENTS\n        rtspsrc.link(rtph264depay)\n        rtph264depay.link(decoder)\n        decoder.link(nvvideoconvert)\n        nvvideoconvert.link(caps_filter)\n\n        # BIN GHOST PAD\n        # We need to create a ghost pad for the rtsp source bin which will act as a src pad\n        rtsp_source_bin.add_pad(\n            Gst.GhostPad.new_no_target(&quot;src&quot;, Gst.PadDirection.SRC)\n        )\n        ghost_pad = rtsp_source_bin.get_static_pad(&quot;src&quot;)\n        if not ghost_pad:\n            print(&quot; Failed to add ghost pad in source bin \\n&quot;)\n            return None\n        ghost_pad.set_target(caps_filter.get_static_pad(&quot;src&quot;))\n        return rtsp_source_bin\n\n    @staticmethod\n    def _get_decoding_element_cuda_device(camera_index: int):\n        nvv4l2decoder = create_gst_elemement(&quot;nvv4l2decoder&quot;, f&quot;nvv4l2decoder_{camera_index}&quot;)\n        nvv4l2decoder.set_property(&quot;cudadec-memtype&quot;, int(pyds.NVBUF_MEM_CUDA_DEVICE))\n        nvv4l2decoder.set_property(&quot;num-extra-surfaces&quot;, NVV4L2DECODER_NUM_EXTRA_SURFACES)\n        nvvideoconvert = create_gst_elemement(&quot;nvvideoconvert&quot;, f&quot;nvvideoconvert_{camera_index}&quot;)\n        nvvideoconvert.set_property(&quot;nvbuf-memory-type&quot;, int(pyds.NVBUF_MEM_CUDA_UNIFIED))\n        nvvideoconvert.set_property(&quot;output-buffers&quot;, NVVIDEOCONVERT_OUTPUT_BUFFERS)\n        return nvv4l2decoder, nvvideoconvert\n\n    @staticmethod\n    def _get_decoding_element_cpu(camera_index: int):\n        avdec_h264 = create_gst_elemement(&quot;avdec_h264&quot;, f&quot;avdec_h264_{camera_index}&quot;)\n        avdec_h264.set_property(&quot;output-corrupt&quot;, 0)\n        nvvideoconvert = create_gst_elemement(&quot;nvvideoconvert&quot;, f&quot;nvvideoconvert_{camera_index}&quot;)\n        nvvideoconvert.set_property(&quot;nvbuf-memory-type&quot;, int(pyds.NVBUF_MEM_CUDA_UNIFIED))\n        nvvideoconvert.set_property(&quot;output-buffers&quot;, NVVIDEOCONVERT_OUTPUT_BUFFERS)\n        return avdec_h264, nvvideoconvert\n\n    @classmethod\n    def rtspsrc_callback_newpad(cls, rtsp_src, rtsp_src_new_src_pad, data):\n        print(f&quot;SourceBin: added pad {rtsp_src_new_src_pad.name} to {rtsp_src.name}&quot;)\n        caps = rtsp_src_new_src_pad.get_current_caps()\n        gststruct = caps.get_structure(0)\n        # gstname = gststruct.get_name()\n        # rtph264depay = data\n        # features = caps.get_features(0)\n\n        # Need to check if the pad created by the decodebin is for video and not audio.\n        # TODO: are we checking if this is a video in the correct way?\n        if gststruct.get_string(&quot;media&quot;) == &quot;video&quot;:\n            # Get the source bin ghost pad\n            rtsp_src_ghost_pad = rtsp_src.get_static_pad(&quot;src&quot;)\n            print(f&quot;padcaps {rtsp_src_ghost_pad.get_current_caps()}&quot;)\n            if not rtsp_src_ghost_pad.set_target(rtsp_src_new_src_pad):\n                print(\n                    &quot;Failed to link decoder src pad to source bin ghost pad\\n&quot;\n                )\n\n\n\ndef create_gst_elemement(factory_name, instance_name):\n    element = Gst.ElementFactory.make(factory_name, instance_name)\n    if not element:\n        print(f&quot; Unable to create {factory_name} {instance_name} \\n&quot;)\n    return element\n\n\n# Standard GStreamer initialization\nGObject.threads_init()\nGst.init(None)\n\n# Create Pipeline element that will form a connection of other elements\nprint(&quot;Creating Pipeline \\n&quot;)\npipeline = Gst.Pipeline()\nif not pipeline:\n    print(&quot; Unable to create Pipeline \\n&quot;)\n\n# Url\nrtsp_url = &quot;... your rtsp url...&quot;\nnumber_of_streams = 1\nfor index in range(number_of_streams):\n    # Create bin that decode the video stream\n    rtsp_source_bin = RtspSourceBin.create_rtsp_source_bin(index=index, source_url=rtsp_url, decoding_memory=&quot;cuda&quot;)\n    # Create leaky queue\n    queue = create_gst_elemement(&quot;queue&quot;, f&quot;queue_{index}&quot;)\n    queue.set_property(&quot;leaky&quot;, 2)\n    queue.set_property(&quot;max-size-buffers&quot;, 1)\n    # Create fakesink\n    fakesink = create_gst_elemement(&quot;fakesink&quot;, f&quot;fakesink_{index}&quot;)\n    fakesink.set_property(&quot;sync&quot;, 1)\n    # Add elements to pipeline\n    pipeline.add(rtsp_source_bin)\n    pipeline.add(queue)\n    pipeline.add(fakesink)\n    # Link elements\n    rtsp_source_bin.link(queue)\n    queue.link(fakesink)\n\n# create an event loop\nloop = GObject.MainLoop()\n\n\n# Start pipeline\nprint(&quot;Starting pipeline \\n&quot;)\npipeline.set_state(Gst.State.PLAYING)\n\n# Loop that calls the garbage collector so that we know the actual memory used\ndef _collect_garbage_loop():\n    while True:\n        try:\n            gc.collect()\n        except:\n            print(traceback.format_exc())\n        finally:\n            time.sleep(1)\nthread_gc = Thread(target=_collect_garbage_loop)\nthread_gc.start()\n\n# Save graph\ngraph_data = Gst.debug_bin_to_dot_data(pipeline, Gst.DebugGraphDetails.ALL)\ngraph = pgv.AGraph()\ngraph.from_string(graph_data)\ngraph.layout(&quot;dot&quot;)\ngraph.draw(&quot;pipeline.pdf&quot;, format=&quot;pdf&quot;)\nprint(&quot;Graph saved&quot;)\n\n# Run loop\ntry:\n    loop.run()\nexcept BaseException:\n    pass\nexcept Exception as e:\n    print(&quot;Exception&quot;, str(e))\n\n# cleanup\n# pipeline.set_state(Gst.State.NULL)\n</code></pre>\n<p>You can find the pipeline graph here: <a href=\"https://drive.google.com/file/d/1yGKMOswBQHCQx2333GlSrP7rxFctcnBZ/view?usp=sharing\" rel=\"nofollow noreferrer\">https://drive.google.com/file/d/1yGKMOswBQHCQx2333GlSrP7rxFctcnBZ/view?usp=sharing</a></p>\n<p>EDIT: the following updated code with additional queue so that the code keeps decoding frames. As suggested I also added <code>h264parse</code>.\nI still have the same issues.\nPipeline graph: <a href=\"https://drive.google.com/file/d/1SS0z-xB2cCDw2m4aRj9IFaJ2WIPlboVW/view?usp=sharing\" rel=\"nofollow noreferrer\">https://drive.google.com/file/d/1SS0z-xB2cCDw2m4aRj9IFaJ2WIPlboVW/view?usp=sharing</a></p>\n<pre class=\"lang-py prettyprint-override\"><code>import time\nimport traceback\n\nimport cv2\nimport gi\ngi.require_version(&quot;Gst&quot;, &quot;1.0&quot;)\ngi.require_version(&quot;GstRtspServer&quot;, &quot;1.0&quot;)\nfrom gi.repository import GObject, Gst, GstRtspServer\n\nimport gc\nfrom threading import Thread\nimport pyds\nimport pygraphviz as pgv\n\n\nNVV4L2DECODER_NUM_EXTRA_SURFACES = 1\nNVVIDEOCONVERT_OUTPUT_BUFFERS = 1\n\n\n\nclass RtspSourceBin:\n    &quot;&quot;&quot; Class used to create a bin that decode an rtsp video stream.\n    &quot;&quot;&quot;\n\n    @classmethod\n    def create_rtsp_source_bin(cls, index: int, source_url: str, decoding_memory: str):\n        # SOURCE BIN\n        # Create a source GstBin to abstract this bin's content from the rest of the pipeline\n        bin_name = &quot;source-bin-%02d&quot; % index\n        rtsp_source_bin = Gst.Bin.new(bin_name)\n        if not rtsp_source_bin:\n            print(&quot; Unable to create source bin \\n&quot;)\n\n        # INTERNAL BIN ELEMENTS\n        rtspsrc = create_gst_elemement(&quot;rtspsrc&quot;, f&quot;rtspsrc_{index}&quot;)\n        rtspsrc.set_property(&quot;location&quot;, source_url)\n        rtspsrc.set_property(&quot;protocols&quot;, &quot;tcp&quot;)\n        # Uncomment the following two lines to prevent the memory leak (but this will cause corrupted video frames)\n        # rtspsrc.set_property(&quot;latency&quot;, 1000)\n        # rtspsrc.set_property(&quot;drop-on-latency&quot;, 1)\n        rtspsrc.set_property(&quot;timeout&quot;, 5000000)  # microseconds\n        rtspsrc.set_property(&quot;debug&quot;, 1)\n\n        rtph264depay = create_gst_elemement(&quot;rtph264depay&quot;, f&quot;rtph264depay_{index}&quot;)\n\n        h264parse = create_gst_elemement(&quot;h264parse&quot;, f&quot;h264parse_{index}&quot;)\n\n        if decoding_memory == &quot;cpu&quot;:\n            decoder, nvvideoconvert = cls._get_decoding_element_cpu(camera_index=index)\n        elif decoding_memory == &quot;cuda&quot;:\n            decoder, nvvideoconvert = cls._get_decoding_element_cuda_device(camera_index=index)\n        else:\n            raise ValueError()\n\n        # Video rate\n        # videorate = create_gst_elemement(&quot;videorate&quot;, f&quot;videorate_{index}&quot;)\n        # videorate.set_property(&quot;drop-only&quot;, 1)\n        # videorate.set_property(&quot;skip-to-first&quot;, 1)\n        # videorate.set_property(&quot;max-rate&quot;, 1)\n\n        # Queue to drop frames\n        queue = create_gst_elemement(&quot;queue&quot;, f&quot;queue_{index}&quot;)\n        queue.set_property(&quot;leaky&quot;, 2)\n        queue.set_property(&quot;max-size-buffers&quot;, 1)\n\n        # By converting images to RGBA we can download them from GPU whenever we want\n        caps_filter = create_gst_elemement(&quot;capsfilter&quot;, f&quot;filter_numpy_frame_{index}&quot;)\n        caps_filter.set_property(&quot;caps&quot;, Gst.Caps.from_string((f&quot;video/x-raw(memory:NVMM), format=RGBA&quot;)))\n\n        # RTSPSRC GHOST PAD\n        # rtspsrc will create a src pad once it starts decoding, for now we initialize a ghost pad\n        # to be linked to next elment in the bin\n        # We also add a callback on the signal &quot;pad-added&quot; to link the actual src pad when it is initialized\n        rtspsrc.add_pad(\n            Gst.GhostPad.new_no_target(&quot;src&quot;, Gst.PadDirection.SRC)\n        )\n        rtspsrc.connect(&quot;pad-added&quot;, cls.rtspsrc_callback_newpad, rtph264depay)\n\n        # ADD ELEMENTS TO THE BIN\n        Gst.Bin.add(rtsp_source_bin, rtspsrc)\n        Gst.Bin.add(rtsp_source_bin, rtph264depay)\n        Gst.Bin.add(rtsp_source_bin, h264parse)\n        Gst.Bin.add(rtsp_source_bin, decoder)\n        Gst.Bin.add(rtsp_source_bin, queue)\n        Gst.Bin.add(rtsp_source_bin, nvvideoconvert)\n        Gst.Bin.add(rtsp_source_bin, caps_filter)\n\n        # LINK ELEMENTS\n        rtspsrc.link(rtph264depay)\n        rtph264depay.link(h264parse)\n        h264parse.link(decoder)\n        decoder.link(queue)\n        queue.link(nvvideoconvert)\n        nvvideoconvert.link(caps_filter)\n\n        # BIN GHOST PAD\n        # We need to create a ghost pad for the rtsp source bin which will act as a src pad\n        rtsp_source_bin.add_pad(\n            Gst.GhostPad.new_no_target(&quot;src&quot;, Gst.PadDirection.SRC)\n        )\n        ghost_pad = rtsp_source_bin.get_static_pad(&quot;src&quot;)\n        if not ghost_pad:\n            print(&quot; Failed to add ghost pad in source bin \\n&quot;)\n            return None\n        ghost_pad.set_target(caps_filter.get_static_pad(&quot;src&quot;))\n        return rtsp_source_bin\n\n    @staticmethod\n    def _get_decoding_element_cuda_device(camera_index: int):\n        nvv4l2decoder = create_gst_elemement(&quot;nvv4l2decoder&quot;, f&quot;nvv4l2decoder_{camera_index}&quot;)\n        nvv4l2decoder.set_property(&quot;cudadec-memtype&quot;, int(pyds.NVBUF_MEM_CUDA_DEVICE))\n        nvv4l2decoder.set_property(&quot;num-extra-surfaces&quot;, NVV4L2DECODER_NUM_EXTRA_SURFACES)\n        nvvideoconvert = create_gst_elemement(&quot;nvvideoconvert&quot;, f&quot;nvvideoconvert_{camera_index}&quot;)\n        nvvideoconvert.set_property(&quot;nvbuf-memory-type&quot;, int(pyds.NVBUF_MEM_CUDA_UNIFIED))\n        nvvideoconvert.set_property(&quot;output-buffers&quot;, NVVIDEOCONVERT_OUTPUT_BUFFERS)\n        return nvv4l2decoder, nvvideoconvert\n\n    @staticmethod\n    def _get_decoding_element_cpu(camera_index: int):\n        avdec_h264 = create_gst_elemement(&quot;avdec_h264&quot;, f&quot;avdec_h264_{camera_index}&quot;)\n        avdec_h264.set_property(&quot;output-corrupt&quot;, 0)\n        nvvideoconvert = create_gst_elemement(&quot;nvvideoconvert&quot;, f&quot;nvvideoconvert_{camera_index}&quot;)\n        nvvideoconvert.set_property(&quot;nvbuf-memory-type&quot;, int(pyds.NVBUF_MEM_CUDA_UNIFIED))\n        nvvideoconvert.set_property(&quot;output-buffers&quot;, NVVIDEOCONVERT_OUTPUT_BUFFERS)\n        return avdec_h264, nvvideoconvert\n\n    @classmethod\n    def rtspsrc_callback_newpad(cls, rtsp_src, rtsp_src_new_src_pad, data):\n        print(f&quot;SourceBin: added pad {rtsp_src_new_src_pad.name} to {rtsp_src.name}&quot;)\n        caps = rtsp_src_new_src_pad.get_current_caps()\n        gststruct = caps.get_structure(0)\n        # gstname = gststruct.get_name()\n        # rtph264depay = data\n        # features = caps.get_features(0)\n\n        # Need to check if the pad created by the decodebin is for video and not audio.\n        # TODO: are we checking if this is a video in the correct way?\n        if gststruct.get_string(&quot;media&quot;) == &quot;video&quot;:\n            # Get the source bin ghost pad\n            rtsp_src_ghost_pad = rtsp_src.get_static_pad(&quot;src&quot;)\n            print(f&quot;padcaps {rtsp_src_ghost_pad.get_current_caps()}&quot;)\n            if not rtsp_src_ghost_pad.set_target(rtsp_src_new_src_pad):\n                print(\n                    &quot;Failed to link decoder src pad to source bin ghost pad\\n&quot;\n                )\n\n\n\ndef create_gst_elemement(factory_name, instance_name):\n    element = Gst.ElementFactory.make(factory_name, instance_name)\n    if not element:\n        print(f&quot; Unable to create {factory_name} {instance_name} \\n&quot;)\n    return element\n\n\ndef print_resolution(rtsp_url):\n    vcap = cv2.VideoCapture(rtsp_url)\n    status, frame = vcap.read()\n    print(&quot;Frame shape&quot;, frame.shape)\n\n\n# Standard GStreamer initialization\nGObject.threads_init()\nGst.init(None)\n\n# Create Pipeline element that will form a connection of other elements\nprint(&quot;Creating Pipeline \\n&quot;)\npipeline = Gst.Pipeline()\nif not pipeline:\n    print(&quot; Unable to create Pipeline \\n&quot;)\n\n# Url\nrtsp_url = &quot;...rtsp url...&quot;\nnumber_of_streams = 64\n\nprint_resolution(rtsp_url)\n\nfor index in range(number_of_streams):\n    # Create bin that decode the video stream\n    rtsp_source_bin = RtspSourceBin.create_rtsp_source_bin(index=index, source_url=rtsp_url, decoding_memory=&quot;cuda&quot;)\n    # Create fakesink\n    fakesink = create_gst_elemement(&quot;fakesink&quot;, f&quot;fakesink_{index}&quot;)\n    fakesink.set_property(&quot;sync&quot;, 1)\n    # Add elements to pipeline\n    pipeline.add(rtsp_source_bin)\n    pipeline.add(fakesink)\n    # Link elements\n    rtsp_source_bin.link(fakesink)\n\n# create an event loop\nloop = GObject.MainLoop()\n\n\n# Start pipeline\nprint(&quot;Starting pipeline \\n&quot;)\npipeline.set_state(Gst.State.PLAYING)\n\n# Loop that calls the garbage collector so that we know the actual memory used\ndef _collect_garbage_loop():\n    while True:\n        try:\n            gc.collect()\n        except:\n            print(traceback.format_exc())\n        finally:\n            time.sleep(1)\nthread_gc = Thread(target=_collect_garbage_loop)\nthread_gc.start()\n\n# Save graph\ngraph_data = Gst.debug_bin_to_dot_data(pipeline, Gst.DebugGraphDetails.ALL)\ngraph = pgv.AGraph()\ngraph.from_string(graph_data)\ngraph.layout(&quot;dot&quot;)\ngraph.draw(&quot;pipeline.pdf&quot;, format=&quot;pdf&quot;)\nprint(&quot;Graph saved&quot;)\n\n# Run loop\ntry:\n    loop.run()\nexcept BaseException:\n    pass\nexcept Exception as e:\n    print(&quot;Exception&quot;, str(e))\n\n# cleanup\n# pipeline.set_state(Gst.State.NULL)\n</code></pre>\n"},{"tags":["c#","winforms","image-processing"],"owner":{"account_id":11701507,"reputation":21,"user_id":8566396,"user_type":"registered","profile_image":"https://i.sstatic.net/hNwA4.gif?s=256","display_name":"Aspiring","link":"https://stackoverflow.com/users/8566396/aspiring"},"is_answered":false,"view_count":9583,"answer_count":1,"score":1,"last_activity_date":1751965485,"creation_date":1504669236,"last_edit_date":1504685527,"question_id":46066418,"content_license":"CC BY-SA 3.0","link":"https://stackoverflow.com/questions/46066418/c-application-to-zoom-in-out-the-image-in-a-picturebox","title":"C# Application to Zoom in/out the image in a PictureBox","body":"<p>I am somewhat new to programming in general, but I am eager to learn more and I was wondering if anyone could possibly help me out with an idea.</p>\n\n<p>(<strong><em>main goal</em></strong>)</p>\n\n<p>I want to make a simple program that consists of a C# Windows Forms Application that displays a preset image (of 6000x6000 pixel dimensions, SizeMode set to Zoom so the entire image is visible on the form at once) in a PictureBox that will take up the entire form practically, save for a space at the bottom of the form where I want to display a TrackBar that will allow you to zoom the image in and out; as well as a horizontal scroll bar at the base of the PictureBox, and a vertical scroll bar on the right side of the PictureBox to scroll around the map when it is zoomed, and I wanted to be able to control these scroll bars by either clicking and dragging in a corresponding direction on the PictureBox (preferred but not sure if its possible) or by using the scroll wheel on the mouse (probably easier but once again not sure).</p>\n\n<p>(<strong><em>reference</em></strong>)</p>\n\n<p>[ <strong><em>Here is my form completed exactly as I described, with a 6000x6000 placement holder demo texture in a PictureBox using SizeMode Zoom, as an example</em></strong> - THIS HAS BEEN HANDLED, NEXT PART OF THE PROBLEM IS UPDATED BELOW:]</p>\n\n<p>(<strong><em>addendum</em></strong>)</p>\n\n<p>The only issue I am having is the code, as I am pretty much greenhorn in that department. I have been working to learn Visual Studio's workflow, but I really could use some help.</p>\n\n<p>Thank you so much in advance for anything you can help me with.</p>\n\n<p>UPDATE:</p>\n\n<p>After doing research on the subject and taking time to do some thinking, I have come up with the code listed below; but my problem is that when I pan my image too far, the image is allowed to be pulled too far over, thus exposing the panel behind it when the image is panned/pulled too far over to one corner. Also, when I zoom too far out, the image is allowed to become WAY smaller than the Picturebox.</p>\n\n<p><a href=\"https://i.sstatic.net/eT8eS.jpg\" rel=\"nofollow noreferrer\">Panning issue, the grey parts of the panel are the problem</a></p>\n\n<p><a href=\"https://i.sstatic.net/2lMKb.png\" rel=\"nofollow noreferrer\">Zoom issue, the grey parts of the panel are the problem</a></p>\n\n<p>So, my last question: How would I go about revising the code below to 'lock' the image that I am panning and zooming from being allowed to pan or zoom outside of its frame and expose the panel behind it?</p>\n\n<pre><code>public partial class ImageZoomMainForm : Form\n{\n    Image img;\n    Point mouseDown;\n    int startx = 0;\n    int starty = 0;\n    int imgx = 0; \n    int imgy = 0;\n\n    bool mousepressed = false;  \n    float zoom = 1;\n\n    public ImageZoomMainForm()\n    {\n\n        InitializeComponent();\n        string imagefilename = @\"..\\..\\ViewPort_MAIN.tif\";\n        img = Image.FromFile(imagefilename);\n\n        Graphics g = this.CreateGraphics();\n\n\n\n\n\n\n\n\n        zoom = ((float)pictureBox.Width / (float)img.Width) * (img.HorizontalResolution / g.DpiX);\n\n        pictureBox.Paint += new PaintEventHandler(imageBox_Paint);\n    }\n\n    private void pictureBox_MouseMove(object sender, EventArgs e)\n    {\n        MouseEventArgs mouse = e as MouseEventArgs;\n\n        if (mouse.Button == MouseButtons.Left)\n        {\n            Point mousePosNow = mouse.Location;\n\n            int deltaX = mousePosNow.X - mouseDown.X; \n            int deltaY = mousePosNow.Y - mouseDown.Y;\n\n            imgx = (int)(startx + (deltaX / zoom));  \n            imgy = (int)(starty + (deltaY / zoom));\n\n            pictureBox.Refresh();\n        }\n    }\n\n    private void imageBox_MouseDown(object sender, EventArgs e)\n    {\n        MouseEventArgs mouse = e as MouseEventArgs;\n\n        if (mouse.Button == MouseButtons.Left)\n        {\n            if (!mousepressed)\n            {\n                mousepressed = true;\n                mouseDown = mouse.Location;\n                startx = imgx;\n                starty = imgy;\n            }\n        }\n    }\n\n    private void imageBox_MouseUp(object sender, EventArgs e)\n    {\n        mousepressed = false;\n    }\n\n    protected override void OnMouseWheel(MouseEventArgs e)\n    {\n        float oldzoom = zoom;\n\n        if (e.Delta &gt; 0)\n        {\n            zoom += 0.1F;\n        }\n\n        else if (e.Delta &lt; 0)\n        {\n            zoom = Math.Max(zoom - 0.1F, 0.01F);\n        }\n\n        MouseEventArgs mouse = e as MouseEventArgs;\n        Point mousePosNow = mouse.Location;\n\n        int x = mousePosNow.X - pictureBox.Location.X;    \n        int y = mousePosNow.Y - pictureBox.Location.Y;\n\n        int oldimagex = (int)(x / oldzoom);  \n        int oldimagey = (int)(y / oldzoom);\n\n        int newimagex = (int)(x / zoom);     \n        int newimagey = (int)(y / zoom);\n\n        imgx = newimagex - oldimagex + imgx;  \n        imgy = newimagey - oldimagey + imgy;\n\n        pictureBox.Refresh();  \n\n\n    }\n\n    private void imageBox_Paint(object sender, PaintEventArgs e)\n    {\n        e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;\n        e.Graphics.ScaleTransform(zoom, zoom);\n        e.Graphics.DrawImage(img, imgx, imgy);\n    }\n\n\n\n    protected override bool ProcessCmdKey(ref Message msg, Keys keyData)\n    {\n        const int WM_KEYDOWN = 0x100;\n        const int WM_SYSKEYDOWN = 0x104;\n\n        if ((msg.Msg == WM_KEYDOWN) || (msg.Msg == WM_SYSKEYDOWN))\n        {\n            switch (keyData)\n            {\n                case Keys.Right:\n                    imgx -= (int)(pictureBox.Width * 0.1F / zoom);\n                    pictureBox.Refresh();\n                    break;\n\n                case Keys.Left:\n                    imgx += (int)(pictureBox.Width * 0.1F / zoom);\n                    pictureBox.Refresh();\n                    break;\n\n                case Keys.Down:\n                    imgy -= (int)(pictureBox.Height * 0.1F / zoom);\n                    pictureBox.Refresh();\n                    break;\n\n                case Keys.Up:\n                    imgy += (int)(pictureBox.Height * 0.1F / zoom);\n                    pictureBox.Refresh();\n                    break;\n\n                case Keys.PageDown:\n                    imgy -= (int)(pictureBox.Height * 0.90F / zoom);\n                    pictureBox.Refresh();\n                    break;\n\n                case Keys.PageUp:\n                    imgy += (int)(pictureBox.Height * 0.90F / zoom);\n                    pictureBox.Refresh();\n                    break;\n            }\n        }\n\n        return base.ProcessCmdKey(ref msg, keyData);\n    }\n\n    private void ImageZoomMainForm_Load(object sender, EventArgs e)\n    {\n\n    }\n}\n</code></pre>\n\n<p>}</p>\n"},{"tags":["python","py-shiny"],"owner":{"account_id":4427442,"reputation":923,"user_id":3605534,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/c332475cb4324041b44d6e716bc1688f?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"GSandro_Strongs","link":"https://stackoverflow.com/users/3605534/gsandro-strongs"},"is_answered":true,"view_count":33,"answer_count":1,"score":1,"last_activity_date":1751951905,"creation_date":1751917752,"last_edit_date":1751951905,"question_id":79693348,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79693348/how-to-add-an-image-to-a-page-navbar","title":"How to add an image to a page_navbar?","body":"<p>I have a Shiny Python App in which I want to add an image as a logo on the menu's left hand side. I created my www folder and I saved the logo.png file there. I don't know why I cannot see the image when loading my Shiny App. I share the code as follows:</p>\n<pre><code>from shiny import App, ui\n\napp_ui = ui.page_navbar(\n    ui.nav_panel(&quot;Bar&quot;, ui.h2(&quot;Bar plot&quot;)),\n    ui.nav_panel(&quot;Map&quot;, ui.h2(&quot;Cloropleth&quot;)),\n    ui.nav_spacer(), \n    ui.nav_control(ui.input_dark_mode(id=&quot;dark_mode_switch&quot;)),\n    title=ui.tags.a(ui.tags.img(src=&quot;logo.png&quot;, height=&quot;30px&quot;), &quot;&quot;, href=&quot;#&quot;)\n)\n\napp = App(app_ui, server=None)\nif __name__ == '__main__':\n    app.run()\n</code></pre>\n<p>My folder structure is main_folder which contains the www folder and the app.py file. I am using Python 3.12 and shiny 1.4.0.</p>\n"},{"tags":["kotlin","android-studio","android-jetpack-compose","mobile-development"],"owner":{"account_id":15753299,"reputation":23,"user_id":11367139,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/c6a0035e3b630adedb33b105a48cb61b?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Apo","link":"https://stackoverflow.com/users/11367139/apo"},"is_answered":false,"view_count":65,"answer_count":0,"score":-1,"last_activity_date":1751951156,"creation_date":1751325165,"last_edit_date":1751951156,"question_id":79685364,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79685364/add-background-image-to-scaffold-structure","title":"Add background image to scaffold structure","body":"<p>I am using Kotlin for an app and trying to add a background image for one of the views. This image is not stored in the app, but on the phone since the user selected it beforehand. For the example I added a hard coded path. The view follows a Scaffold structure.</p>\n<pre><code>Scaffold { paddingValues -&gt;\n    Column(\n        verticalArrangement = Arrangement.SpaceEvenly,\n        horizontalAlignment = Alignment.CenterHorizontally,\n        modifier = Modifier\n            .paint(\n                painter = rememberAsyncImagePainter(&quot;/sdcard/.transforms/synthetic/picker/0/com.android.providers.media.photopicker/media/1000000033.jpg&quot;)\n            )\n            .fillMaxSize()\n            .padding(paddingValues = paddingValues)\n    ) {\n        Column(\n            verticalArrangement = Arrangement.spacedBy(MaterialTheme.space.xLarge),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(\n                text = &quot;test&quot;\n                textAlign = TextAlign.Center,\n                style = MaterialTheme.typography.displayLarge,\n                color = MaterialTheme.colorScheme.onPrimary\n            )\n\n            Text(\n                text = &quot;text2&quot;,\n                style = MaterialTheme.typography.displayLarge.copy(fontSize = 64.sp),\n                color = MaterialTheme.colorScheme.onPrimary,\n                maxLines = 1\n            )\n        }\n   ...\n</code></pre>\n<p>I tried with the paint modifier, but no success, whatever I try nothing is being displayed. I also checked the answer <a href=\"https://stackoverflow.com/questions/54241753/background-image-for-scaffold\">here</a> but could not replicate it.</p>\n<p>the method used in <a href=\"https://stackoverflow.com/questions/70064992/i-am-trying-to-set-a-background-image-in-android-using-jetpack-compose-but-the-i\">this post</a> assumes images that are already know and located in an asset folder, while in my case the images are dynamically loaded from the phone and I only have a path to the image, not a drawable id. Following this post and @tyg comments, I now have this code that still displays a white background, not my image.</p>\n<pre><code>Box {\n    AsyncImage(\n    modifier = Modifier.fillMaxSize(),\n    model = &quot;/sdcard/.transforms/synthetic/picker/0/com.android.providers.media.photopicker/media/1000000033.jpg&quot;,\n    contentDescription = &quot;background_image&quot;,\n    contentScale = ContentScale.FillBounds\n)\nScaffold(\n    Modifier.background(color = Color.Transparent)\n) { paddingValues -&gt;\n    Column(\n        verticalArrangement = Arrangement.SpaceEvenly,\n        horizontalAlignment = Alignment.CenterHorizontally,\n        modifier = Modifier\n            .fillMaxSize()\n            .background(\n                color = Color.Transparent\n            )\n            .padding(paddingValues = paddingValues)\n    ) {\n        Column(\n            verticalArrangement = Arrangement.spacedBy(MaterialTheme.space.xLarge),\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Text(\n                text = if (state.isAlarmSnoozed) {\n                    stringResource(R.string.alarm_snoozed_until)\n                } else {\n                    state.alarmLabel ?: stringResource(R.string.alarm_wake_up)\n                },\n                textAlign = TextAlign.Center,\n                style = MaterialTheme.typography.displayLarge,\n                color = MaterialTheme.colorScheme.onPrimary\n            )\n\n            Text(\n                text = getTimeString(\n                    timeInMillis =\n                    if (state.isAlarmSnoozed &amp;&amp; state.snoozedAlarmTimeInMillis != null) {\n                        state.snoozedAlarmTimeInMillis\n                    } else {\n                        state.currentTimeInMillis\n                    },\n                    is24HourFormat = DateFormat.is24HourFormat(LocalContext.current)\n                ),\n                style = MaterialTheme.typography.displayLarge.copy(fontSize = 64.sp),\n                color = MaterialTheme.colorScheme.onPrimary,\n                maxLines = 1\n            )\n        }\n    ...\n</code></pre>\n"},{"tags":["python","jupyter-notebook","jupyter-lab"],"owner":{"account_id":41135986,"reputation":13,"user_id":30138064,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a7d3022df440042faedbd84b463c296e?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Jay Woden","link":"https://stackoverflow.com/users/30138064/jay-woden"},"is_answered":false,"view_count":33,"answer_count":0,"score":0,"last_activity_date":1751948974,"creation_date":1751948974,"question_id":79693658,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79693658/how-to-load-image-data-with-jupyterlab-in-ubk-rap","title":"How to load image data with JupyterLab in UBK-RAP","body":"<p>I have buied a project which contains fundus images in UK-Biobank. And I want to load them in UKB-RAP with JupyterLab so that I can use the images to do my work. How to achieve it?</p>\n<p>For example, I know the <code>entity</code> is <code>participant</code>, I know the <code>name</code> is <code>p21015_i0_a0</code>, I know the <code>eid</code> is <code>1234567</code>, and I know the <code>folder_path</code> is <code>Assessment centre/Eye measures/Retinal optical coherence tomography</code>. How to load it to JupyterLab?</p>\n<p>The JupyterLab is provided by &quot;DNAnexus Platform&quot;, I want to load image from UKB to it.</p>\n<p>Some informations about <code>p21015_i0_a0</code> are attached, maybe useful.\n<a href=\"https://i.sstatic.net/gYioGD7I.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/gYioGD7I.png\" alt=\"data\" /></a></p>\n<p><a href=\"https://i.sstatic.net/MBweKNsp.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/MBweKNsp.png\" alt=\"notes\" /></a></p>\n<p>Additionally, I know a way to load phenotype data, as follows. But how to load bulk(image) data with JupyterLab?</p>\n<pre class=\"lang-py prettyprint-override\"><code>#Step 1. Get the file containing all available data-fields in your Dataset by running the following command:\nimport dxpy\nimport subprocess\n\n# Automatically discover dispensed dataset ID and load the dataset \ndispensed_dataset_id = dxpy.find_one_data_object(typename='Dataset', name='app*.dataset', folder='/', name_mode='glob')['id']\n\n# Get project ID\nproject_id = dxpy.find_one_project()[&quot;id&quot;]\ndataset = (':').join([project_id, dispensed_dataset_id])\n\ncmd = [&quot;dx&quot;, &quot;extract_dataset&quot;, dataset, &quot;-ddd&quot;, &quot;--delimiter&quot;, &quot;,&quot;]\nsubprocess.check_call(cmd)\n#The above command will generate 3 *.csv files, and the *.dataset.data_dictionary.csv file contains full information about all available data-fields (the field names are in the second column).\n\n\n#Step 2. Collect all data-field names of interest, and write them into a variable field_names_protein. Here is an example collecting all proteins. \nimport os\nimport glob\n\npath = os.getcwd()\n\ndata_dict_csv = glob.glob(os.path.join(path, &quot;*.data_dictionary.csv&quot;))[0]\ndata_dict_df = pd.read_csv(data_dict_csv)\ndata_dict_df.head()\n\nfield_names = list(\n    data_dict_df.loc[data_dict_df[&quot;entity&quot;] == &quot;olink_instance_0&quot;, &quot;name&quot;].values\n)\n\nfield_names_str = [f&quot;olink_instance_0.{f}&quot; for f in field_names]\nfield_names_protein = &quot;,&quot;.join(field_names_str)\n\n\n#Step 3. Extract the data using dx extract_dataset command.\ncmd = ['dx', \n    'extract_dataset',\n    dataset,\n    '--fields',\n    field_names_protein,\n    '--delimiter',\n    ',',\n    '--output',\n    &lt;filename.csv&gt;,\n]\nsubprocess.check_call(cmd)\n</code></pre>\n<p>Any suggestions will be useful for me. Thanks. :)</p>\n"},{"tags":["javascript","image","vue.js","frontend","cropperjs"],"owner":{"account_id":21767829,"reputation":3,"user_id":16071458,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/1ef7e5093467b3fd4b0aad459eb777de?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"666Jonah666","link":"https://stackoverflow.com/users/16071458/666jonah666"},"is_answered":true,"view_count":44,"accepted_answer_id":79693541,"answer_count":1,"score":0,"last_activity_date":1751934468,"creation_date":1751932986,"last_edit_date":1751933521,"question_id":79693530,"content_license":"CC BY-SA 4.0","link":"https://stackoverflow.com/questions/79693530/cropper-js-image-is-too-small-in-vue-3-component","title":"Cropper.js image is too small in Vue 3 component","body":"<p>I'm new to Vue and Cropper.js, and I'm working on a project where I let users upload and crop their avatar.</p>\n<p>The problem is that the image inside the cropper appears extremely small (sometimes like 10x10 pixels), even though I tried to style it via CSS. No matter what I do, the cropper is tiny and unusable.</p>\n<p>I’ve tried different configurations (Setting fixed width and height on both .image-container and the  tag), and even on a clean test project the problem remains.</p>\n<p>Here’s my base Vue component:</p>\n<pre class=\"lang-js prettyprint-override\"><code>&lt;template&gt;\n    &lt;div&gt;\n        &lt;div class=&quot;image-container&quot;&gt;\n            &lt;img ref=&quot;image&quot; :src=&quot;src&quot;/&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    import Cropper from 'cropperjs'\n    import '../assets/cropper.css'\n\n    export default {\n        name: 'ImageCropper',\n        props: {\n            src: String\n        },\n\n        data() {\n            return {\n                cropper: {},\n                destination: {},\n                image: {}\n            } \n        },\n\n        mounted() {\n            this.image = this.$refs.image;\n            this.cropper = new Cropper(this.image, {\n                zoomable: false,\n                scalable: false,\n                aspectRatio: 1\n            });\n        }\n    }\n\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot; scoped&gt;\n    .image-container {\n        width: 800px;\n        height: 800px;\n        position: relative;\n\n        img {\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            display: block;\n        }\n    }\n&lt;/style&gt;\n</code></pre>\n<p>Here's what it looks like:\n<a href=\"https://i.sstatic.net/yq9agv0w.png\" rel=\"nofollow noreferrer\">sample</a></p>\n"}],"has_more":true,"quota_max":10000,"quota_remaining":9986}","status":200,"tags":["/search/[query]/[id]/page"],"url":"https://api.stackexchange.com/2.3/search?intitle=image&accepted=True&site=stackoverflow&is_answered=True&filter=withbody&key=rl_faxSu5ocpSJMEM4ynvZwz6JQ5&page=2"},"revalidate":31536000}