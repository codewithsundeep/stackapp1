{"kind":"FETCH","data":{"headers":{"access-control-allow-credentials":"false","access-control-allow-methods":"GET, POST","access-control-allow-origin":"*","cache-control":"private","cf-cache-status":"DYNAMIC","cf-ray":"95e1c7cd2e2c2c07-MAA","connection":"keep-alive","content-encoding":"gzip","content-length":"23329","content-security-policy":"upgrade-insecure-requests; frame-ancestors 'self' https://stackexchange.com","content-type":"application/json; charset=utf-8","date":"Sat, 12 Jul 2025 16:05:09 GMT","server":"cloudflare","set-cookie":"_cfuvid=9I7.wGa_LWZ9gpn3e953c4PeNzT9D1X6a5o50TRgG6k-1752336309718-0.0.1.1-604800000; path=/; domain=.api.stackexchange.com; HttpOnly; Secure; SameSite=None","strict-transport-security":"max-age=31536000; includeSubDomains","vary":"accept-encoding","x-content-type-options":"nosniff","x-providence-cookie":"ff4321c2-3d12-40b5-90ca-1d8621717c25","x-request-guid":"e4e8b5cd-96df-45d4-9b7b-be3f4954eb95","x-worker-origin-response-time":"406000000"},"body":"","status":200,"tags":["/search/[query]/page"],"url":"https://api.stackexchange.com/2.3/search?intitle=image&accepted=True&site=stackoverflow&is_answered=True&filter=withbody&key=rl_faxSu5ocpSJMEM4ynvZwz6JQ5&page=1"},"revalidate":31536000}